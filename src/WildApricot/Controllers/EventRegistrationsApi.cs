/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using WildApricot.Attributes;
using WildApricot.Models;
using WildApricot.Security;

namespace WildApricot.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class EventRegistrationsApiController : ControllerBase
    {
        /// <summary>
        /// Retrieve list of public event registration infos (if enabled).
        /// </summary>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="eventId">ID of event to retrieve registrations for</param>
        /// <param name="simpleQuery">A search string used to filter contacts list.</param>
        /// <param name="skip">This parameter specifies the number of records to be skipped. For example, if the result set contains 200 records and $skip&#x3D;50, then the call will return records 51 to 200.  Usually used together with **$top** parameter. </param>
        /// <param name="top">Specifies the maximum number of records to be returned. For example, if the result set contains 100 records and $top&#x3D;50, then the call will return records from 1 to 50. If omitted or set more than 100 then maximum 100 items returned. Usually this parameter used together with $skip parameter. </param>
        /// <param name="count">Append this parameter to a search request to retrieve the number of items returned by the search. </param>
        /// <param name="ids">Retrieve specific event registrations (if allowed).  E.g. &#x60;ids&#x3D;1,2,3&#x60; </param>
        /// <param name="idsOnly">If specified, the call returns a list of event registration IDs. In this case, the response will contain only the Identifiers field. </param>
        /// <response code="200">Returns list of public event registration infos.</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("/publicview/v1/accounts/{accountId}/EventAttendees")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdEventAttendeesGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(EventAttendeesResponse),
            description: "Returns list of public event registration infos."
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult AccountsAccountIdEventAttendeesGet(
            [FromRoute] [Required] decimal? accountId,
            [FromQuery] [Required()] int? eventId,
            [FromQuery] string simpleQuery,
            [FromQuery] int? skip,
            [FromQuery] int? top,
            [FromQuery] bool? count,
            [FromQuery] string ids,
            [FromQuery] bool? idsOnly
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EventAttendeesResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "{\n  \"RegistrationPublicInfos\" : [ {\n    \"NumberOfGuests\" : 1,\n    \"Organization\" : \"Organization\",\n    \"RegistrationDate\" : \"RegistrationDate\",\n    \"FirstName\" : \"FirstName\",\n    \"Id\" : 0,\n    \"LastName\" : \"LastName\",\n    \"ContactId\" : 6,\n    \"Url\" : \"Url\"\n  }, {\n    \"NumberOfGuests\" : 1,\n    \"Organization\" : \"Organization\",\n    \"RegistrationDate\" : \"RegistrationDate\",\n    \"FirstName\" : \"FirstName\",\n    \"Id\" : 0,\n    \"LastName\" : \"LastName\",\n    \"ContactId\" : 6,\n    \"Url\" : \"Url\"\n  } ],\n  \"Count\" : 5,\n  \"Identifiers\" : [ 5, 5 ]\n}";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<EventAttendeesResponse>(exampleJson)
                    : default(EventAttendeesResponse); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve list of event registrations for current contact.
        /// </summary>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="eventId">ID of event to retrieve registrations for</param>
        /// <param name="parentRegistrationId">ID of event registration to retrieve dependant registrations for</param>
        /// <response code="200">Returns list of event registrations for current contact.</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("/publicview/v1/accounts/{accountId}/eventregistrations")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdEventregistrationsGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(List<EventRegistration>),
            description: "Returns list of event registrations for current contact."
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult AccountsAccountIdEventregistrationsGet(
            [FromRoute] [Required] decimal? accountId,
            [FromQuery] int? eventId,
            [FromQuery] int? parentRegistrationId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EventRegistration>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "[ {\n  \"ShowToPublic\" : true,\n  \"Status\" : \"Undefined\",\n  \"IsGuestRegistration\" : true,\n  \"NumberOfGuests\" : 2,\n  \"Invoice\" : {\n    \"Id\" : 0,\n    \"Url\" : \"Url\"\n  },\n  \"HasChildRegistrations\" : true,\n  \"Url\" : \"Url\",\n  \"PaidAmount\" : 5.637376656633329,\n  \"RegistrationFields\" : [ {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  }, {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  } ],\n  \"RegistrationFee\" : 5.962133916683182,\n  \"RegistrationType\" : {\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  },\n  \"Event\" : {\n    \"StartDate\" : \"2000-01-23\",\n    \"Id\" : 6,\n    \"EndDate\" : \"2000-01-23\",\n    \"Name\" : \"Name\",\n    \"Location\" : \"Location\"\n  },\n  \"Id\" : 0\n}, {\n  \"ShowToPublic\" : true,\n  \"Status\" : \"Undefined\",\n  \"IsGuestRegistration\" : true,\n  \"NumberOfGuests\" : 2,\n  \"Invoice\" : {\n    \"Id\" : 0,\n    \"Url\" : \"Url\"\n  },\n  \"HasChildRegistrations\" : true,\n  \"Url\" : \"Url\",\n  \"PaidAmount\" : 5.637376656633329,\n  \"RegistrationFields\" : [ {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  }, {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  } ],\n  \"RegistrationFee\" : 5.962133916683182,\n  \"RegistrationType\" : {\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  },\n  \"Event\" : {\n    \"StartDate\" : \"2000-01-23\",\n    \"Id\" : 6,\n    \"EndDate\" : \"2000-01-23\",\n    \"Name\" : \"Name\",\n    \"Location\" : \"Location\"\n  },\n  \"Id\" : 0\n} ]";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<List<EventRegistration>>(exampleJson)
                    : default(List<EventRegistration>); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete own event registration or wait list item.
        /// </summary>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="id"></param>
        /// <response code="200">Retrieve details for specific event registration.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="404">Requested item not found.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpDelete]
        [Route("/publicview/v1/accounts/{accountId}/eventregistrations/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdEventregistrationsIdDelete")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(EventRegistration),
            description: "Retrieve details for specific event registration."
        )]
        public virtual IActionResult AccountsAccountIdEventregistrationsIdDelete(
            [FromRoute] [Required] decimal? accountId,
            [FromRoute] [Required] decimal? id
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EventRegistration));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "{\n  \"ShowToPublic\" : true,\n  \"Status\" : \"Undefined\",\n  \"IsGuestRegistration\" : true,\n  \"NumberOfGuests\" : 2,\n  \"Invoice\" : {\n    \"Id\" : 0,\n    \"Url\" : \"Url\"\n  },\n  \"HasChildRegistrations\" : true,\n  \"Url\" : \"Url\",\n  \"PaidAmount\" : 5.637376656633329,\n  \"RegistrationFields\" : [ {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  }, {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  } ],\n  \"RegistrationFee\" : 5.962133916683182,\n  \"RegistrationType\" : {\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  },\n  \"Event\" : {\n    \"StartDate\" : \"2000-01-23\",\n    \"Id\" : 6,\n    \"EndDate\" : \"2000-01-23\",\n    \"Name\" : \"Name\",\n    \"Location\" : \"Location\"\n  },\n  \"Id\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<EventRegistration>(exampleJson)
                    : default(EventRegistration); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve details for specific event registration.
        /// </summary>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="id"></param>
        /// <response code="200">Retrieve details for specific event registration.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="404">Requested item not found.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("/publicview/v1/accounts/{accountId}/eventregistrations/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdEventregistrationsIdGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(EventRegistration),
            description: "Retrieve details for specific event registration."
        )]
        public virtual IActionResult AccountsAccountIdEventregistrationsIdGet(
            [FromRoute] [Required] decimal? accountId,
            [FromRoute] [Required] decimal? id
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EventRegistration));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "{\n  \"ShowToPublic\" : true,\n  \"Status\" : \"Undefined\",\n  \"IsGuestRegistration\" : true,\n  \"NumberOfGuests\" : 2,\n  \"Invoice\" : {\n    \"Id\" : 0,\n    \"Url\" : \"Url\"\n  },\n  \"HasChildRegistrations\" : true,\n  \"Url\" : \"Url\",\n  \"PaidAmount\" : 5.637376656633329,\n  \"RegistrationFields\" : [ {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  }, {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  } ],\n  \"RegistrationFee\" : 5.962133916683182,\n  \"RegistrationType\" : {\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  },\n  \"Event\" : {\n    \"StartDate\" : \"2000-01-23\",\n    \"Id\" : 6,\n    \"EndDate\" : \"2000-01-23\",\n    \"Name\" : \"Name\",\n    \"Location\" : \"Location\"\n  },\n  \"Id\" : 0\n}";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<EventRegistration>(exampleJson)
                    : default(EventRegistration); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create new event registration
        /// </summary>
        /// <param name="body"></param>
        /// <param name="accountId">Your account identifier</param>
        /// <response code="200">ID of new event registration</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpPost]
        [Route("/publicview/v1/accounts/{accountId}/eventregistrations")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdEventregistrationsPost")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(int?),
            description: "ID of new event registration"
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult AccountsAccountIdEventregistrationsPost(
            [FromBody] EventRegistrationParams body,
            [FromRoute] [Required] decimal? accountId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(int?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson = "0";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<int?>(exampleJson)
                    : default(int?); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Generate possible invoice for event registration
        /// </summary>
        /// <remarks>- --</remarks>
        /// <param name="body">The same parameters as for creating new Event Registration</param>
        /// <param name="accountId">Your account identifier</param>
        /// <response code="200">Indicates whether message was accepted</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpPost]
        [Route("/publicview/v1/rpc/{accountId}/CalculateEventRegistrationCosts")]
        [ValidateModelState]
        [SwaggerOperation("RpcAccountIdCalculateEventRegistrationCostsPost")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(Invoice),
            description: "Indicates whether message was accepted"
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult RpcAccountIdCalculateEventRegistrationCostsPost(
            [FromBody] EventRegistrationParams body,
            [FromRoute] [Required] decimal? accountId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Invoice));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "{\n  \"OrderType\" : \"MembershipApplication\",\n  \"OrderDetails\" : [ {\n    \"Taxes\" : {\n      \"Tax2\" : \"\",\n      \"Tax1\" : \"\",\n      \"RoundedAmount\" : 2.027123023002322,\n      \"Amount\" : 2.3021358869347655,\n      \"NetAmount\" : 3.616076749251911,\n      \"CalculatedTax1\" : 7.061401241503109,\n      \"CalculatedTax2\" : 9.301444243932576\n    },\n    \"Price\" : 5.962133916683182,\n    \"Quantity\" : 5.637376656633329,\n    \"OrderDetailType\" : \"Unspecified\",\n    \"Notes\" : \"Notes\"\n  }, {\n    \"Taxes\" : {\n      \"Tax2\" : \"\",\n      \"Tax1\" : \"\",\n      \"RoundedAmount\" : 2.027123023002322,\n      \"Amount\" : 2.3021358869347655,\n      \"NetAmount\" : 3.616076749251911,\n      \"CalculatedTax1\" : 7.061401241503109,\n      \"CalculatedTax2\" : 9.301444243932576\n    },\n    \"Price\" : 5.962133916683182,\n    \"Quantity\" : 5.637376656633329,\n    \"OrderDetailType\" : \"Unspecified\",\n    \"Notes\" : \"Notes\"\n  } ],\n  \"Value\" : 6.027456183070403,\n  \"Id\" : 0,\n  \"DocumentNumber\" : \"DocumentNumber\",\n  \"DocumentDate\" : \"2000-01-23\",\n  \"FullyPaid\" : true,\n  \"Url\" : \"Url\",\n  \"PaidAmount\" : 1.4658129805029452\n}";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<Invoice>(exampleJson)
                    : default(Invoice); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Cancels event registration
        /// </summary>
        /// <remarks>- --</remarks>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="body"></param>
        /// <response code="200">Indicates that the registration was successfully canceled</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="404">Requested item not found.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpPost]
        [Route("/publicview/v1/rpc/{accountId}/CancelEventRegistration")]
        [ValidateModelState]
        [SwaggerOperation("RpcAccountIdCancelEventRegistrationPost")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(bool?),
            description: "Indicates that the registration was successfully canceled"
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult RpcAccountIdCancelEventRegistrationPost(
            [FromRoute] [Required] decimal? accountId,
            [FromBody] int? body
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson = "true";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                    : default(bool?); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Indicates whether the registration can be canceled by the registrant
        /// </summary>
        /// <remarks>- --</remarks>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="registrationId">Event registration identifier</param>
        /// <response code="200">- --</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("/publicview/v1/rpc/{accountId}/IsEventRegistrationCancellationAllowed")]
        [ValidateModelState]
        [SwaggerOperation("RpcAccountIdIsEventRegistrationCancellationAllowedGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "- --")]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult RpcAccountIdIsEventRegistrationCancellationAllowedGet(
            [FromRoute] [Required] decimal? accountId,
            [FromQuery] [Required()] int? registrationId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson = "true";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                    : default(bool?); //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

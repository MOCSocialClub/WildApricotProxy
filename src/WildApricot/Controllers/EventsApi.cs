/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using WildApricot.Attributes;
using WildApricot.Models;
using WildApricot.Security;

namespace WildApricot.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class EventsApiController : ControllerBase
    {
        /// <summary>
        /// Retrieve details for specific event
        /// </summary>
        /// <remarks>Retrieve details for specific event</remarks>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="eventId">Unique event identifier</param>
        /// <response code="200">Returns list of filtered events</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="404">Requested item not found.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("/publicview/v1/accounts/{accountId}/events/{eventId}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdEventsEventIdGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(List<ModelEvent>),
            description: "Returns list of filtered events"
        )]
        public virtual IActionResult AccountsAccountIdEventsEventIdGet(
            [FromRoute] [Required] decimal? accountId,
            [FromRoute] [Required] int? eventId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ModelEvent>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "[ {\n  \"StartDate\" : \"2000-01-23\",\n  \"StartTimeSpecified\" : true,\n  \"Details\" : {\n    \"MultipleRegistrationAllowed\" : true,\n    \"RegistrationStatistics\" : {\n      \"RegistrationsPaidCount\" : 2,\n      \"RegistrationsFreeCount\" : 1,\n      \"RegistrationsOnWaitlistCount\" : 6,\n      \"RegistrationsPartiallyPaidCount\" : 1,\n      \"RegistrationsUnpaidCount\" : 4,\n      \"RegistrationsCanceledCount\" : 7,\n      \"RegistrationsWithNoInvoiceCount\" : 1\n    },\n    \"Organizer\" : \"\",\n    \"IsAutoCancelRegistrationEnabled\" : true,\n    \"TimeZone\" : {\n      \"UtcOffset\" : 6.027456183070403,\n      \"ZoneId\" : \"ZoneId\",\n      \"Name\" : \"Name\"\n    },\n    \"EventRegistrationFields\" : [ {\n      \"Order\" : 7,\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"AllowedValues\" : [ {\n        \"Label\" : \"Label\",\n        \"Id\" : 6,\n        \"ExtraCost\" : 1.4658129805029452\n      }, {\n        \"Label\" : \"Label\",\n        \"Id\" : 6,\n        \"ExtraCost\" : 1.4658129805029452\n      } ],\n      \"DisplayType\" : \"DisplayType\",\n      \"ExtraCharge\" : {\n        \"MultiplierType\" : \"ItemPrice\",\n        \"MinAmount\" : 2,\n        \"MaxCharge\" : 3.616076749251911,\n        \"Multiplier\" : 5.637376656633329,\n        \"MinCharge\" : 9.301444243932576,\n        \"MaxAmount\" : 7\n      },\n      \"SystemCode\" : \"SystemCode\",\n      \"Kind\" : \"Common\",\n      \"Access\" : \"Public\",\n      \"IsSystem\" : true,\n      \"RulesAndTermsInfo\" : {\n        \"Text\" : \"Text\",\n        \"Link\" : \"Link\"\n      },\n      \"FieldName\" : \"FieldName\"\n    }, {\n      \"Order\" : 7,\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"AllowedValues\" : [ {\n        \"Label\" : \"Label\",\n        \"Id\" : 6,\n        \"ExtraCost\" : 1.4658129805029452\n      }, {\n        \"Label\" : \"Label\",\n        \"Id\" : 6,\n        \"ExtraCost\" : 1.4658129805029452\n      } ],\n      \"DisplayType\" : \"DisplayType\",\n      \"ExtraCharge\" : {\n        \"MultiplierType\" : \"ItemPrice\",\n        \"MinAmount\" : 2,\n        \"MaxCharge\" : 3.616076749251911,\n        \"Multiplier\" : 5.637376656633329,\n        \"MinCharge\" : 9.301444243932576,\n        \"MaxAmount\" : 7\n      },\n      \"SystemCode\" : \"SystemCode\",\n      \"Kind\" : \"Common\",\n      \"Access\" : \"Public\",\n      \"IsSystem\" : true,\n      \"RulesAndTermsInfo\" : {\n        \"Text\" : \"Text\",\n        \"Link\" : \"Link\"\n      },\n      \"FieldName\" : \"FieldName\"\n    } ],\n    \"IsWaitlistEnabled\" : true,\n    \"DescriptionHtml\" : \"DescriptionHtml\",\n    \"RegistrationAutoCancelTimeout\" : 1.1730742509559433,\n    \"PaymentMethod\" : \"OnlineAndOffline\",\n    \"RegistrationTypes\" : [ {\n      \"MultipleRegistrationAllowed\" : true,\n      \"Availability\" : \"Everyone\",\n      \"BasePrice\" : 5.637376656633329,\n      \"AvailableThrough\" : \"2000-01-23\",\n      \"Description\" : \"Description\",\n      \"GuestPrice\" : 2.3021358869347655,\n      \"CancellationBehavior\" : \"None\",\n      \"MaximumRegistrantsCount\" : 7,\n      \"CancellationDaysBeforeEvent\" : 3,\n      \"GuestRegistrationPolicy\" : \"Disabled\",\n      \"AvailableFrom\" : \"2000-01-23\",\n      \"Name\" : \"Name\",\n      \"CodeRequired\" : true,\n      \"CurrentRegistrantsCount\" : 9,\n      \"IsWaitlistEnabled\" : true,\n      \"EventId\" : 5,\n      \"AvailableForRegistration\" : true,\n      \"Id\" : 1\n    }, {\n      \"MultipleRegistrationAllowed\" : true,\n      \"Availability\" : \"Everyone\",\n      \"BasePrice\" : 5.637376656633329,\n      \"AvailableThrough\" : \"2000-01-23\",\n      \"Description\" : \"Description\",\n      \"GuestPrice\" : 2.3021358869347655,\n      \"CancellationBehavior\" : \"None\",\n      \"MaximumRegistrantsCount\" : 7,\n      \"CancellationDaysBeforeEvent\" : 3,\n      \"GuestRegistrationPolicy\" : \"Disabled\",\n      \"AvailableFrom\" : \"2000-01-23\",\n      \"Name\" : \"Name\",\n      \"CodeRequired\" : true,\n      \"CurrentRegistrantsCount\" : 9,\n      \"IsWaitlistEnabled\" : true,\n      \"EventId\" : 5,\n      \"AvailableForRegistration\" : true,\n      \"Id\" : 1\n    } ],\n    \"RegistrationsPublicVisibility\" : \"Nobody\",\n    \"WaitlistSettings\" : {\n      \"Type\" : \"None\",\n      \"InformationToCollect\" : \"Undefined\"\n    }\n  },\n  \"RegistrationEnabled\" : true,\n  \"Sessions\" : [ {\n    \"StartDate\" : \"2000-01-23\",\n    \"StartTimeSpecified\" : true,\n    \"EndTimeSpecified\" : true,\n    \"Title\" : \"Title\",\n    \"Id\" : 4,\n    \"EndDate\" : \"2000-01-23\"\n  }, {\n    \"StartDate\" : \"2000-01-23\",\n    \"StartTimeSpecified\" : true,\n    \"EndTimeSpecified\" : true,\n    \"Title\" : \"Title\",\n    \"Id\" : 4,\n    \"EndDate\" : \"2000-01-23\"\n  } ],\n  \"EndTimeSpecified\" : true,\n  \"RegistrationsLimit\" : 6,\n  \"Id\" : 0,\n  \"EndDate\" : \"2000-01-23\",\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\",\n  \"Location\" : \"Location\"\n}, {\n  \"StartDate\" : \"2000-01-23\",\n  \"StartTimeSpecified\" : true,\n  \"Details\" : {\n    \"MultipleRegistrationAllowed\" : true,\n    \"RegistrationStatistics\" : {\n      \"RegistrationsPaidCount\" : 2,\n      \"RegistrationsFreeCount\" : 1,\n      \"RegistrationsOnWaitlistCount\" : 6,\n      \"RegistrationsPartiallyPaidCount\" : 1,\n      \"RegistrationsUnpaidCount\" : 4,\n      \"RegistrationsCanceledCount\" : 7,\n      \"RegistrationsWithNoInvoiceCount\" : 1\n    },\n    \"Organizer\" : \"\",\n    \"IsAutoCancelRegistrationEnabled\" : true,\n    \"TimeZone\" : {\n      \"UtcOffset\" : 6.027456183070403,\n      \"ZoneId\" : \"ZoneId\",\n      \"Name\" : \"Name\"\n    },\n    \"EventRegistrationFields\" : [ {\n      \"Order\" : 7,\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"AllowedValues\" : [ {\n        \"Label\" : \"Label\",\n        \"Id\" : 6,\n        \"ExtraCost\" : 1.4658129805029452\n      }, {\n        \"Label\" : \"Label\",\n        \"Id\" : 6,\n        \"ExtraCost\" : 1.4658129805029452\n      } ],\n      \"DisplayType\" : \"DisplayType\",\n      \"ExtraCharge\" : {\n        \"MultiplierType\" : \"ItemPrice\",\n        \"MinAmount\" : 2,\n        \"MaxCharge\" : 3.616076749251911,\n        \"Multiplier\" : 5.637376656633329,\n        \"MinCharge\" : 9.301444243932576,\n        \"MaxAmount\" : 7\n      },\n      \"SystemCode\" : \"SystemCode\",\n      \"Kind\" : \"Common\",\n      \"Access\" : \"Public\",\n      \"IsSystem\" : true,\n      \"RulesAndTermsInfo\" : {\n        \"Text\" : \"Text\",\n        \"Link\" : \"Link\"\n      },\n      \"FieldName\" : \"FieldName\"\n    }, {\n      \"Order\" : 7,\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"AllowedValues\" : [ {\n        \"Label\" : \"Label\",\n        \"Id\" : 6,\n        \"ExtraCost\" : 1.4658129805029452\n      }, {\n        \"Label\" : \"Label\",\n        \"Id\" : 6,\n        \"ExtraCost\" : 1.4658129805029452\n      } ],\n      \"DisplayType\" : \"DisplayType\",\n      \"ExtraCharge\" : {\n        \"MultiplierType\" : \"ItemPrice\",\n        \"MinAmount\" : 2,\n        \"MaxCharge\" : 3.616076749251911,\n        \"Multiplier\" : 5.637376656633329,\n        \"MinCharge\" : 9.301444243932576,\n        \"MaxAmount\" : 7\n      },\n      \"SystemCode\" : \"SystemCode\",\n      \"Kind\" : \"Common\",\n      \"Access\" : \"Public\",\n      \"IsSystem\" : true,\n      \"RulesAndTermsInfo\" : {\n        \"Text\" : \"Text\",\n        \"Link\" : \"Link\"\n      },\n      \"FieldName\" : \"FieldName\"\n    } ],\n    \"IsWaitlistEnabled\" : true,\n    \"DescriptionHtml\" : \"DescriptionHtml\",\n    \"RegistrationAutoCancelTimeout\" : 1.1730742509559433,\n    \"PaymentMethod\" : \"OnlineAndOffline\",\n    \"RegistrationTypes\" : [ {\n      \"MultipleRegistrationAllowed\" : true,\n      \"Availability\" : \"Everyone\",\n      \"BasePrice\" : 5.637376656633329,\n      \"AvailableThrough\" : \"2000-01-23\",\n      \"Description\" : \"Description\",\n      \"GuestPrice\" : 2.3021358869347655,\n      \"CancellationBehavior\" : \"None\",\n      \"MaximumRegistrantsCount\" : 7,\n      \"CancellationDaysBeforeEvent\" : 3,\n      \"GuestRegistrationPolicy\" : \"Disabled\",\n      \"AvailableFrom\" : \"2000-01-23\",\n      \"Name\" : \"Name\",\n      \"CodeRequired\" : true,\n      \"CurrentRegistrantsCount\" : 9,\n      \"IsWaitlistEnabled\" : true,\n      \"EventId\" : 5,\n      \"AvailableForRegistration\" : true,\n      \"Id\" : 1\n    }, {\n      \"MultipleRegistrationAllowed\" : true,\n      \"Availability\" : \"Everyone\",\n      \"BasePrice\" : 5.637376656633329,\n      \"AvailableThrough\" : \"2000-01-23\",\n      \"Description\" : \"Description\",\n      \"GuestPrice\" : 2.3021358869347655,\n      \"CancellationBehavior\" : \"None\",\n      \"MaximumRegistrantsCount\" : 7,\n      \"CancellationDaysBeforeEvent\" : 3,\n      \"GuestRegistrationPolicy\" : \"Disabled\",\n      \"AvailableFrom\" : \"2000-01-23\",\n      \"Name\" : \"Name\",\n      \"CodeRequired\" : true,\n      \"CurrentRegistrantsCount\" : 9,\n      \"IsWaitlistEnabled\" : true,\n      \"EventId\" : 5,\n      \"AvailableForRegistration\" : true,\n      \"Id\" : 1\n    } ],\n    \"RegistrationsPublicVisibility\" : \"Nobody\",\n    \"WaitlistSettings\" : {\n      \"Type\" : \"None\",\n      \"InformationToCollect\" : \"Undefined\"\n    }\n  },\n  \"RegistrationEnabled\" : true,\n  \"Sessions\" : [ {\n    \"StartDate\" : \"2000-01-23\",\n    \"StartTimeSpecified\" : true,\n    \"EndTimeSpecified\" : true,\n    \"Title\" : \"Title\",\n    \"Id\" : 4,\n    \"EndDate\" : \"2000-01-23\"\n  }, {\n    \"StartDate\" : \"2000-01-23\",\n    \"StartTimeSpecified\" : true,\n    \"EndTimeSpecified\" : true,\n    \"Title\" : \"Title\",\n    \"Id\" : 4,\n    \"EndDate\" : \"2000-01-23\"\n  } ],\n  \"EndTimeSpecified\" : true,\n  \"RegistrationsLimit\" : 6,\n  \"Id\" : 0,\n  \"EndDate\" : \"2000-01-23\",\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\",\n  \"Location\" : \"Location\"\n} ]";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<List<ModelEvent>>(exampleJson)
                    : default(List<ModelEvent>); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve list of events visible to the current user.
        /// </summary>
        /// <remarks>Retrieve list of events visible to the current user.</remarks>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="filter">An expression to filter events. Possible field names to filter events are  **Id** - A list of event IDs. Supports operation **in**. E.g. &#x60;$filter&#x3D;Id in [1,3,5,7,9]&#x60;  **RegistrationEnabled** - Indicates whether registration has been enabled for the event. Supports operations **eq** and **ne**. E.g. &#x60;RegistrationEnabled eq true&#x60;  **IsUpcoming** - Indicates whether the event has yet to take place. Supports operations **eq** and **ne**. E.g. &#x60;IsUpcoming eq false&#x60;  **StartDate** - The start date of the event (using the yyyy-mm-dd date format). Supports operations **eq**, **ne**, **gt**, **ge**, **lt**, **le**. E.g. &#x60;StartDate gt 2016-01-02&#x60;  **EndDate** - The end date of the event (using  the  yyyy-mm-dd date format). Supports operations **eq**, **ne**, **gt**, **ge**, **lt**, **le**. E.g. &#x60;EndDate le 2016-01-02&#x60;  **TextIndex** - Returns events that contain the specified string within the event title, description, location, start date, or event tag. Supports operation **substringof**. E.g. &#x60;$filter&#x3D;substringof(TextIndex,&#x27;some text to look for&#x27;)&#x60; </param>
        /// <param name="skip">This parameter specifies the number of records to be skipped. For example, if the result set contains 100 records and $skip&#x3D;50, then the call will return records 51 to 150.  Usually used together with **$top** parameter. </param>
        /// <param name="top">Specifies the maximum number of records to be returned. For example, if the result set contains 100 records and $top&#x3D;50, then the call will return records from 1 to 50. If omitted or set more than 100 then maximum 100 items returned. Usually this parameter used together with $skip parameter. </param>
        /// <param name="count">Append this parameter to a search request to retrieve the number of items. </param>
        /// <param name="idsOnly">If specified, the call returns a list of event IDs for the filtered events. In this case, the response will contain only the EventsIdentifiers field. </param>
        /// <response code="200">Returns list of filtered events</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("/publicview/v1/accounts/{accountId}/events")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdEventsGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(EventsResponse),
            description: "Returns list of filtered events"
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult AccountsAccountIdEventsGet(
            [FromRoute] [Required] decimal? accountId,
            [FromQuery] string filter,
            [FromQuery] int? skip,
            [FromQuery] int? top,
            [FromQuery] bool? count,
            [FromQuery] bool? idsOnly
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EventsResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "{\n  \"Events\" : [ {\n    \"StartDate\" : \"2000-01-23\",\n    \"StartTimeSpecified\" : true,\n    \"Details\" : {\n      \"MultipleRegistrationAllowed\" : true,\n      \"RegistrationStatistics\" : {\n        \"RegistrationsPaidCount\" : 2,\n        \"RegistrationsFreeCount\" : 1,\n        \"RegistrationsOnWaitlistCount\" : 6,\n        \"RegistrationsPartiallyPaidCount\" : 1,\n        \"RegistrationsUnpaidCount\" : 4,\n        \"RegistrationsCanceledCount\" : 7,\n        \"RegistrationsWithNoInvoiceCount\" : 1\n      },\n      \"Organizer\" : \"\",\n      \"IsAutoCancelRegistrationEnabled\" : true,\n      \"TimeZone\" : {\n        \"UtcOffset\" : 6.027456183070403,\n        \"ZoneId\" : \"ZoneId\",\n        \"Name\" : \"Name\"\n      },\n      \"EventRegistrationFields\" : [ {\n        \"Order\" : 7,\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"AllowedValues\" : [ {\n          \"Label\" : \"Label\",\n          \"Id\" : 6,\n          \"ExtraCost\" : 1.4658129805029452\n        }, {\n          \"Label\" : \"Label\",\n          \"Id\" : 6,\n          \"ExtraCost\" : 1.4658129805029452\n        } ],\n        \"DisplayType\" : \"DisplayType\",\n        \"ExtraCharge\" : {\n          \"MultiplierType\" : \"ItemPrice\",\n          \"MinAmount\" : 2,\n          \"MaxCharge\" : 3.616076749251911,\n          \"Multiplier\" : 5.637376656633329,\n          \"MinCharge\" : 9.301444243932576,\n          \"MaxAmount\" : 7\n        },\n        \"SystemCode\" : \"SystemCode\",\n        \"Kind\" : \"Common\",\n        \"Access\" : \"Public\",\n        \"IsSystem\" : true,\n        \"RulesAndTermsInfo\" : {\n          \"Text\" : \"Text\",\n          \"Link\" : \"Link\"\n        },\n        \"FieldName\" : \"FieldName\"\n      }, {\n        \"Order\" : 7,\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"AllowedValues\" : [ {\n          \"Label\" : \"Label\",\n          \"Id\" : 6,\n          \"ExtraCost\" : 1.4658129805029452\n        }, {\n          \"Label\" : \"Label\",\n          \"Id\" : 6,\n          \"ExtraCost\" : 1.4658129805029452\n        } ],\n        \"DisplayType\" : \"DisplayType\",\n        \"ExtraCharge\" : {\n          \"MultiplierType\" : \"ItemPrice\",\n          \"MinAmount\" : 2,\n          \"MaxCharge\" : 3.616076749251911,\n          \"Multiplier\" : 5.637376656633329,\n          \"MinCharge\" : 9.301444243932576,\n          \"MaxAmount\" : 7\n        },\n        \"SystemCode\" : \"SystemCode\",\n        \"Kind\" : \"Common\",\n        \"Access\" : \"Public\",\n        \"IsSystem\" : true,\n        \"RulesAndTermsInfo\" : {\n          \"Text\" : \"Text\",\n          \"Link\" : \"Link\"\n        },\n        \"FieldName\" : \"FieldName\"\n      } ],\n      \"IsWaitlistEnabled\" : true,\n      \"DescriptionHtml\" : \"DescriptionHtml\",\n      \"RegistrationAutoCancelTimeout\" : 1.1730742509559433,\n      \"PaymentMethod\" : \"OnlineAndOffline\",\n      \"RegistrationTypes\" : [ {\n        \"MultipleRegistrationAllowed\" : true,\n        \"Availability\" : \"Everyone\",\n        \"BasePrice\" : 5.637376656633329,\n        \"AvailableThrough\" : \"2000-01-23\",\n        \"Description\" : \"Description\",\n        \"GuestPrice\" : 2.3021358869347655,\n        \"CancellationBehavior\" : \"None\",\n        \"MaximumRegistrantsCount\" : 7,\n        \"CancellationDaysBeforeEvent\" : 3,\n        \"GuestRegistrationPolicy\" : \"Disabled\",\n        \"AvailableFrom\" : \"2000-01-23\",\n        \"Name\" : \"Name\",\n        \"CodeRequired\" : true,\n        \"CurrentRegistrantsCount\" : 9,\n        \"IsWaitlistEnabled\" : true,\n        \"EventId\" : 5,\n        \"AvailableForRegistration\" : true,\n        \"Id\" : 1\n      }, {\n        \"MultipleRegistrationAllowed\" : true,\n        \"Availability\" : \"Everyone\",\n        \"BasePrice\" : 5.637376656633329,\n        \"AvailableThrough\" : \"2000-01-23\",\n        \"Description\" : \"Description\",\n        \"GuestPrice\" : 2.3021358869347655,\n        \"CancellationBehavior\" : \"None\",\n        \"MaximumRegistrantsCount\" : 7,\n        \"CancellationDaysBeforeEvent\" : 3,\n        \"GuestRegistrationPolicy\" : \"Disabled\",\n        \"AvailableFrom\" : \"2000-01-23\",\n        \"Name\" : \"Name\",\n        \"CodeRequired\" : true,\n        \"CurrentRegistrantsCount\" : 9,\n        \"IsWaitlistEnabled\" : true,\n        \"EventId\" : 5,\n        \"AvailableForRegistration\" : true,\n        \"Id\" : 1\n      } ],\n      \"RegistrationsPublicVisibility\" : \"Nobody\",\n      \"WaitlistSettings\" : {\n        \"Type\" : \"None\",\n        \"InformationToCollect\" : \"Undefined\"\n      }\n    },\n    \"RegistrationEnabled\" : true,\n    \"Sessions\" : [ {\n      \"StartDate\" : \"2000-01-23\",\n      \"StartTimeSpecified\" : true,\n      \"EndTimeSpecified\" : true,\n      \"Title\" : \"Title\",\n      \"Id\" : 4,\n      \"EndDate\" : \"2000-01-23\"\n    }, {\n      \"StartDate\" : \"2000-01-23\",\n      \"StartTimeSpecified\" : true,\n      \"EndTimeSpecified\" : true,\n      \"Title\" : \"Title\",\n      \"Id\" : 4,\n      \"EndDate\" : \"2000-01-23\"\n    } ],\n    \"EndTimeSpecified\" : true,\n    \"RegistrationsLimit\" : 6,\n    \"Id\" : 0,\n    \"EndDate\" : \"2000-01-23\",\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\",\n    \"Location\" : \"Location\"\n  }, {\n    \"StartDate\" : \"2000-01-23\",\n    \"StartTimeSpecified\" : true,\n    \"Details\" : {\n      \"MultipleRegistrationAllowed\" : true,\n      \"RegistrationStatistics\" : {\n        \"RegistrationsPaidCount\" : 2,\n        \"RegistrationsFreeCount\" : 1,\n        \"RegistrationsOnWaitlistCount\" : 6,\n        \"RegistrationsPartiallyPaidCount\" : 1,\n        \"RegistrationsUnpaidCount\" : 4,\n        \"RegistrationsCanceledCount\" : 7,\n        \"RegistrationsWithNoInvoiceCount\" : 1\n      },\n      \"Organizer\" : \"\",\n      \"IsAutoCancelRegistrationEnabled\" : true,\n      \"TimeZone\" : {\n        \"UtcOffset\" : 6.027456183070403,\n        \"ZoneId\" : \"ZoneId\",\n        \"Name\" : \"Name\"\n      },\n      \"EventRegistrationFields\" : [ {\n        \"Order\" : 7,\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"AllowedValues\" : [ {\n          \"Label\" : \"Label\",\n          \"Id\" : 6,\n          \"ExtraCost\" : 1.4658129805029452\n        }, {\n          \"Label\" : \"Label\",\n          \"Id\" : 6,\n          \"ExtraCost\" : 1.4658129805029452\n        } ],\n        \"DisplayType\" : \"DisplayType\",\n        \"ExtraCharge\" : {\n          \"MultiplierType\" : \"ItemPrice\",\n          \"MinAmount\" : 2,\n          \"MaxCharge\" : 3.616076749251911,\n          \"Multiplier\" : 5.637376656633329,\n          \"MinCharge\" : 9.301444243932576,\n          \"MaxAmount\" : 7\n        },\n        \"SystemCode\" : \"SystemCode\",\n        \"Kind\" : \"Common\",\n        \"Access\" : \"Public\",\n        \"IsSystem\" : true,\n        \"RulesAndTermsInfo\" : {\n          \"Text\" : \"Text\",\n          \"Link\" : \"Link\"\n        },\n        \"FieldName\" : \"FieldName\"\n      }, {\n        \"Order\" : 7,\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"AllowedValues\" : [ {\n          \"Label\" : \"Label\",\n          \"Id\" : 6,\n          \"ExtraCost\" : 1.4658129805029452\n        }, {\n          \"Label\" : \"Label\",\n          \"Id\" : 6,\n          \"ExtraCost\" : 1.4658129805029452\n        } ],\n        \"DisplayType\" : \"DisplayType\",\n        \"ExtraCharge\" : {\n          \"MultiplierType\" : \"ItemPrice\",\n          \"MinAmount\" : 2,\n          \"MaxCharge\" : 3.616076749251911,\n          \"Multiplier\" : 5.637376656633329,\n          \"MinCharge\" : 9.301444243932576,\n          \"MaxAmount\" : 7\n        },\n        \"SystemCode\" : \"SystemCode\",\n        \"Kind\" : \"Common\",\n        \"Access\" : \"Public\",\n        \"IsSystem\" : true,\n        \"RulesAndTermsInfo\" : {\n          \"Text\" : \"Text\",\n          \"Link\" : \"Link\"\n        },\n        \"FieldName\" : \"FieldName\"\n      } ],\n      \"IsWaitlistEnabled\" : true,\n      \"DescriptionHtml\" : \"DescriptionHtml\",\n      \"RegistrationAutoCancelTimeout\" : 1.1730742509559433,\n      \"PaymentMethod\" : \"OnlineAndOffline\",\n      \"RegistrationTypes\" : [ {\n        \"MultipleRegistrationAllowed\" : true,\n        \"Availability\" : \"Everyone\",\n        \"BasePrice\" : 5.637376656633329,\n        \"AvailableThrough\" : \"2000-01-23\",\n        \"Description\" : \"Description\",\n        \"GuestPrice\" : 2.3021358869347655,\n        \"CancellationBehavior\" : \"None\",\n        \"MaximumRegistrantsCount\" : 7,\n        \"CancellationDaysBeforeEvent\" : 3,\n        \"GuestRegistrationPolicy\" : \"Disabled\",\n        \"AvailableFrom\" : \"2000-01-23\",\n        \"Name\" : \"Name\",\n        \"CodeRequired\" : true,\n        \"CurrentRegistrantsCount\" : 9,\n        \"IsWaitlistEnabled\" : true,\n        \"EventId\" : 5,\n        \"AvailableForRegistration\" : true,\n        \"Id\" : 1\n      }, {\n        \"MultipleRegistrationAllowed\" : true,\n        \"Availability\" : \"Everyone\",\n        \"BasePrice\" : 5.637376656633329,\n        \"AvailableThrough\" : \"2000-01-23\",\n        \"Description\" : \"Description\",\n        \"GuestPrice\" : 2.3021358869347655,\n        \"CancellationBehavior\" : \"None\",\n        \"MaximumRegistrantsCount\" : 7,\n        \"CancellationDaysBeforeEvent\" : 3,\n        \"GuestRegistrationPolicy\" : \"Disabled\",\n        \"AvailableFrom\" : \"2000-01-23\",\n        \"Name\" : \"Name\",\n        \"CodeRequired\" : true,\n        \"CurrentRegistrantsCount\" : 9,\n        \"IsWaitlistEnabled\" : true,\n        \"EventId\" : 5,\n        \"AvailableForRegistration\" : true,\n        \"Id\" : 1\n      } ],\n      \"RegistrationsPublicVisibility\" : \"Nobody\",\n      \"WaitlistSettings\" : {\n        \"Type\" : \"None\",\n        \"InformationToCollect\" : \"Undefined\"\n      }\n    },\n    \"RegistrationEnabled\" : true,\n    \"Sessions\" : [ {\n      \"StartDate\" : \"2000-01-23\",\n      \"StartTimeSpecified\" : true,\n      \"EndTimeSpecified\" : true,\n      \"Title\" : \"Title\",\n      \"Id\" : 4,\n      \"EndDate\" : \"2000-01-23\"\n    }, {\n      \"StartDate\" : \"2000-01-23\",\n      \"StartTimeSpecified\" : true,\n      \"EndTimeSpecified\" : true,\n      \"Title\" : \"Title\",\n      \"Id\" : 4,\n      \"EndDate\" : \"2000-01-23\"\n    } ],\n    \"EndTimeSpecified\" : true,\n    \"RegistrationsLimit\" : 6,\n    \"Id\" : 0,\n    \"EndDate\" : \"2000-01-23\",\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\",\n    \"Location\" : \"Location\"\n  } ],\n  \"EventIdentifiers\" : [ 5, 5 ],\n  \"Count\" : 9\n}";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<EventsResponse>(exampleJson)
                    : default(EventsResponse); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Indicates whether the registration code is valid
        /// </summary>
        /// <remarks>- --</remarks>
        /// <param name="body"></param>
        /// <param name="accountId">Your account identifier</param>
        /// <response code="200">Indicates whether the registration code is valid for this event and registration type</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpPost]
        [Route("/publicview/v1/rpc/{accountId}/verifyEventRegistrationCode")]
        [ValidateModelState]
        [SwaggerOperation("RpcAccountIdVerifyEventRegistrationCodePost")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(bool?),
            description: "Indicates whether the registration code is valid for this event and registration type"
        )]
        public virtual IActionResult RpcAccountIdVerifyEventRegistrationCodePost(
            [FromBody] VerifyRegistrationCodeParams body,
            [FromRoute] [Required] decimal? accountId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson = "true";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                    : default(bool?); //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using WildApricot.Attributes;
using WildApricot.Models;
using WildApricot.Security;

namespace WildApricot.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class AttachmentsApiController : ControllerBase
    {
        /// <summary>
        /// Download attachment
        /// </summary>
        /// <remarks>Attachment, available for specific account.</remarks>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="attachmentId">Attachment identifier</param>
        /// <param name="size"></param>
        /// <param name="fieldSystemCode">SystemCode of attachement field which the attachment belongs to.</param>
        /// <param name="contactId">ID of contact which the attachment belongs to.</param>
        /// <param name="eventRegistrationId">ID of event registration which the attachment belongs to.</param>
        /// <param name="asBase64">Base64 encoded image will be returned.</param>
        /// <response code="200">Response is common HttpResponseMessage with content set to attachment binary data.</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="404">Requested item not found.</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("/publicview/v1/accounts/{accountId}/attachments/{attachmentId}")]
        [ValidateModelState]
        [SwaggerOperation("GetAttachmentContent")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(byte[]),
            description: "Response is common HttpResponseMessage with content set to attachment binary data."
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult GetAttachmentContent(
            [FromRoute] [Required] decimal? accountId,
            [FromRoute] [Required] string attachmentId,
            [FromQuery] string size,
            [FromQuery] string fieldSystemCode,
            [FromQuery] string contactId,
            [FromQuery] string eventRegistrationId,
            [FromQuery] bool? asBase64
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson = "\"\"";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                    : default(byte[]); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get attachments infos belongs to a field value
        /// </summary>
        /// <remarks>Attachment infos, available for specific account.</remarks>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="fieldSystemCode">SystemCode of attachement field which the attachment belongs to.</param>
        /// <param name="contactId">ID of contact which the attachment belongs to.</param>
        /// <param name="eventRegistrationId">ID of event registration which the attachment belongs to.</param>
        /// <response code="200">An array of attachment descriptions</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="404">Requested item not found.</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("/publicview/v1/accounts/{accountId}/attachments/GetInfos")]
        [ValidateModelState]
        [SwaggerOperation("GetAttachmentInfos")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(List<WildApricot.Models.FileInfo>),
            description: "An array of attachment descriptions"
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult GetAttachmentInfos(
            [FromRoute] [Required] decimal? accountId,
            [FromQuery] [Required()] string fieldSystemCode,
            [FromQuery] string contactId,
            [FromQuery] string eventRegistrationId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FileInfo>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "[ {\n  \"ContentType\" : \"ContentType\",\n  \"Size\" : 6,\n  \"CreatedDate\" : \"CreatedDate\",\n  \"Id\" : 0,\n  \"Name\" : \"Name\"\n}, {\n  \"ContentType\" : \"ContentType\",\n  \"Size\" : 6,\n  \"CreatedDate\" : \"CreatedDate\",\n  \"Id\" : 0,\n  \"Name\" : \"Name\"\n} ]";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<List<Models.FileInfo>>(exampleJson)
                    : default(List<Models.FileInfo>); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload attachments
        /// </summary>
        /// <remarks>Upload attachments data and get their identifiers to use for contact values.  Attachment not used for any Contact field value will be deleted in 30 minutes. </remarks>
        /// <param name="body"></param>
        /// <param name="accountId">Your account identifier</param>
        /// <response code="200">An array of attachment descriptions</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpPost]
        [Route("/publicview/v1/accounts/{accountId}/attachments/Upload")]
        [ValidateModelState]
        [SwaggerOperation("UploadAttachments")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(List<Models.FileInfo>),
            description: "An array of attachment descriptions"
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual IActionResult UploadAttachments(
            [FromBody] List<AttachmentData> body,
            [FromRoute] [Required] decimal? accountId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FileInfo>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "[ {\n  \"ContentType\" : \"ContentType\",\n  \"Size\" : 6,\n  \"CreatedDate\" : \"CreatedDate\",\n  \"Id\" : 0,\n  \"Name\" : \"Name\"\n}, {\n  \"ContentType\" : \"ContentType\",\n  \"Size\" : 6,\n  \"CreatedDate\" : \"CreatedDate\",\n  \"Id\" : 0,\n  \"Name\" : \"Name\"\n} ]";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<List<Models.FileInfo>>(exampleJson)
                    : default(List<Models.FileInfo>); //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

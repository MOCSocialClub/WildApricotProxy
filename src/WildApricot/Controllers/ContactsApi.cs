/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Versioning;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using WildApricot.Attributes;
using WildApricot.Models;
using WildApricot.Security;

namespace WildApricot.Controllers
{
    using System.Net.Http;
    using Microsoft.Extensions.Logging;
    using Microsoft.Identity.Abstractions;

    /// <summary>
    /// Proxies calls to the Wild Apricot API for non-administrative access
    /// </summary>
    [ApiController]
    [Route(BasePath)]
    public class ContactsApiController(
        IDownstreamApi httpClient,
        ILogger<ContactsApiController> logger
    ) : ProxyControllerBase(httpClient, logger)
    {
        public const string BasePath = "/publicview/v1/accounts/";

        /// <summary>
        /// Detailed list of the common and membership fields.  If a field is not set to be visible to everyone, then the field  will not be included in the results.
        /// </summary>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="showSectionDividers">Specifies whether section dividers should be included in the response. Default value is false. </param>
        /// <response code="200">Array of common and membership field descriptions</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("{accountId}/contactfields")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdContactfieldsGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(ContactField),
            description: "Array of common and membership field descriptions"
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual async Task<IActionResult> AccountsAccountIdContactfieldsGet(
            [FromRoute] [Required] decimal? accountId,
            [FromQuery] bool? showSectionDividers
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContactField));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            // string exampleJson = null;
            // exampleJson =
            //     "{\n  \"Order\" : 5,\n  \"Description\" : \"Description\",\n  \"AllowedValues\" : [ {\n    \"Label\" : \"Label\",\n    \"Id\" : 6,\n    \"ExtraCost\" : 1.4658129805029452\n  }, {\n    \"Label\" : \"Label\",\n    \"Id\" : 6,\n    \"ExtraCost\" : 1.4658129805029452\n  } ],\n  \"DisplayType\" : \"DisplayType\",\n  \"AdminOnly\" : true,\n  \"SystemCode\" : \"SystemCode\",\n  \"Access\" : \"Public\",\n  \"SupportSearch\" : true,\n  \"RulesAndTermsInfo\" : {\n    \"Text\" : \"Text\",\n    \"Link\" : \"Link\"\n  },\n  \"Type\" : \"String\",\n  \"ExtraCharge\" : {\n    \"MultiplierType\" : \"ItemPrice\",\n    \"MinAmount\" : 2,\n    \"MaxCharge\" : 3.616076749251911,\n    \"Multiplier\" : 5.637376656633329,\n    \"MinCharge\" : 9.301444243932576,\n    \"MaxAmount\" : 7\n  },\n  \"AllowToChangeInRenewal\" : true,\n  \"MemberOnly\" : true,\n  \"IsSystem\" : true,\n  \"ExistsInLevels\" : [ {\n    \"Id\" : 0,\n    \"Url\" : \"Url\"\n  }, {\n    \"Id\" : 0,\n    \"Url\" : \"Url\"\n  } ],\n  \"FieldName\" : \"FieldName\",\n  \"IsBuiltIn\" : true,\n  \"IsIncludedInRenewal\" : true\n}";

            // var example =
            //     exampleJson != null
            //         ? JsonConvert.DeserializeObject<ContactField>(exampleJson)
            //         : default(ContactField); //TODO: Change the data returned
            // return new ObjectResult(example);
            return await GetAsync<ContactField>($"{BasePath}{accountId}/contactfields");
        }

        /// <summary>
        /// Retrieve information about specific member or contact
        /// </summary>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="contactId"></param>
        /// <response code="200">Detailed information about requested contact. Field values will be provided with respect to current user permissions and privacy settings.</response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="404">Requested item not found.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("{accountId}/contacts/{contactId}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdContactsContactIdGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(Contact),
            description: "Detailed information about requested contact. Field values will be provided with respect to current user permissions and privacy settings."
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual async Task<IActionResult> AccountsAccountIdContactsContactIdGet(
            [FromRoute] [Required] decimal? accountId,
            [FromRoute] [Required] decimal? contactId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Contact));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            // string exampleJson = null;
            // exampleJson =
            //     "{\n  \"Organization\" : \"Organization\",\n  \"Email\" : \"Email\",\n  \"MembershipLevel\" : {\n    \"Id\" : 6,\n    \"Name\" : \"Name\"\n  },\n  \"FirstName\" : \"FirstName\",\n  \"Phone\" : \"Phone\",\n  \"SendMessageAllowed\" : true,\n  \"Id\" : 0,\n  \"LastName\" : \"LastName\",\n  \"FieldValues\" : [ {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  }, {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  } ],\n  \"Url\" : \"Url\"\n}";

            // var example =
            //     exampleJson != null
            //         ? JsonConvert.DeserializeObject<Contact>(exampleJson)
            //         : default(Contact); //TODO: Change the data returned
            // return new ObjectResult(example);
            return await GetAsync<Contact>($"{BasePath}{accountId}/contacts/{contactId}");
        }

        /// <summary>
        /// Contacts list
        /// </summary>
        /// <remarks> Retrieves or updates contact information. Results can be filtered using filter criteria consisting of fields, operators, and values. Large lists can be retrieved with in sets or pages using $top and $skip parameters. </remarks>
        /// <param name="accountId">Current account identifier</param>
        /// <param name="simpleQuery">A search string used to filter contacts list.</param>
        /// <param name="filter">An expression to filter contacts. Possible field names to filter contacts are **Id** - A list of contact IDs. Supports operation **in**. E.g. &#x60;$filter&#x3D;Id in [1,3,5,7,9]&#x60; </param>
        /// <param name="select">Fields to be returned for each contact. If not specified, no custom fields will be returned. The field names correspond to the fields returned by the [ContactFields API call](#/Contacts/get_accounts__accountId__contactfields), not the field names that appear in Wild Apricot. Multiple field names are separated by commas, and field names with spaces or special characters are enclosed in single quotation marks. Example &#x60;$select&#x3D;&#x27;First name&#x27;,&#x27;Last name&#x27;,&#x27;My favorite book&#x27;&#x60; </param>
        /// <param name="skip">This parameter specifies the number of records to be skipped. For example, if the result set contains 200 records and $skip&#x3D;50, then the call will return records 51 to 150.  Usually used together with **$top** parameter. </param>
        /// <param name="top">Specifies the maximum number of records to be returned. For example, if the result set contains 100 records and $top&#x3D;50, then the call will return records from 1 to 50. If omitted or set more than 100 then maximum 100 items returned Usually this parameter used together with $skip parameter. </param>
        /// <param name="count">Append this parameter to a search request to retrieve the number of contacts returned by the search. </param>
        /// <param name="ids">Retrieve specific contacts.  E.g. &#x60;ids&#x3D;1,2,3&#x60; </param>
        /// <param name="idsOnly">If specified, the call returns a list of contact IDs for the filtered contacts. In this case, the response will contain only the ContactIdentifiers field. </param>
        /// <response code="200">A wrapper object, which contains a list of contacts, or the number of contacts, or a list of contact IDs. </response>
        /// <response code="400">On invalid parameters. See error details in response body.</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("{accountId}/contacts")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdContactsGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(ContactsResponse),
            description: "A wrapper object, which contains a list of contacts, or the number of contacts, or a list of contact IDs. "
        )]
        [SwaggerResponse(
            statusCode: 400,
            type: typeof(Error),
            description: "On invalid parameters. See error details in response body."
        )]
        public virtual async Task<IActionResult> AccountsAccountIdContactsGet(
            [FromRoute] [Required] decimal? accountId,
            [FromQuery] string simpleQuery,
            [FromQuery] string filter,
            [FromQuery] string select,
            [FromQuery] int? skip,
            [FromQuery] int? top,
            [FromQuery] bool? count,
            [FromQuery] string ids,
            [FromQuery] bool? idsOnly
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContactsResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            // string exampleJson = null;
            // exampleJson =
            //     "{\n  \"ContactIdentifiers\" : [ 5, 5 ],\n  \"Contacts\" : [ {\n    \"Organization\" : \"Organization\",\n    \"Email\" : \"Email\",\n    \"MembershipLevel\" : {\n      \"Id\" : 6,\n      \"Name\" : \"Name\"\n    },\n    \"FirstName\" : \"FirstName\",\n    \"Phone\" : \"Phone\",\n    \"SendMessageAllowed\" : true,\n    \"Id\" : 0,\n    \"LastName\" : \"LastName\",\n    \"FieldValues\" : [ {\n      \"FieldOrder\" : 1,\n      \"SystemCode\" : \"SystemCode\",\n      \"Value\" : { },\n      \"FieldName\" : \"FieldName\",\n      \"FieldType\" : \"String\"\n    }, {\n      \"FieldOrder\" : 1,\n      \"SystemCode\" : \"SystemCode\",\n      \"Value\" : { },\n      \"FieldName\" : \"FieldName\",\n      \"FieldType\" : \"String\"\n    } ],\n    \"Url\" : \"Url\"\n  }, {\n    \"Organization\" : \"Organization\",\n    \"Email\" : \"Email\",\n    \"MembershipLevel\" : {\n      \"Id\" : 6,\n      \"Name\" : \"Name\"\n    },\n    \"FirstName\" : \"FirstName\",\n    \"Phone\" : \"Phone\",\n    \"SendMessageAllowed\" : true,\n    \"Id\" : 0,\n    \"LastName\" : \"LastName\",\n    \"FieldValues\" : [ {\n      \"FieldOrder\" : 1,\n      \"SystemCode\" : \"SystemCode\",\n      \"Value\" : { },\n      \"FieldName\" : \"FieldName\",\n      \"FieldType\" : \"String\"\n    }, {\n      \"FieldOrder\" : 1,\n      \"SystemCode\" : \"SystemCode\",\n      \"Value\" : { },\n      \"FieldName\" : \"FieldName\",\n      \"FieldType\" : \"String\"\n    } ],\n    \"Url\" : \"Url\"\n  } ],\n  \"Count\" : 5\n}";

            // var example =
            //     exampleJson != null
            //         ? JsonConvert.DeserializeObject<ContactsResponse>(exampleJson)
            //         : default(ContactsResponse); //TODO: Change the data returned
            // return new ObjectResult(example);
            return await GetAsync<ContactsResponse>(
                $"{BasePath}{accountId}/contacts?simpleQuery={simpleQuery}&filter={filter}&select={select}&skip={skip}&top={top}&count={count}&ids={ids}&idsOnly={idsOnly}"
            );
        }

        /// <summary>
        /// Retrieve information about the current user
        /// </summary>
        /// <remarks>Retrieve information about the current user. FieldValues would not be returned in a result. </remarks>
        /// <param name="accountId">Your account identifier</param>
        /// <param name="includeDetails">Append this parameter to a search request to retrieve additional information for current user, including FieldValues. </param>
        /// <response code="200">The current user information has been updated </response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("{accountId}/contacts/me")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdContactsMeGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(ContactMe),
            description: "The current user information has been updated "
        )]
        [ApiVersion("1.0")]
        public virtual async Task<IActionResult> AccountsAccountIdContactsMeGet(
            [FromRoute] [Required] decimal? accountId,
            [FromQuery] bool? includeDetails
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContactMe));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            // string exampleJson = null;
            // exampleJson =
            // "{\n  \"TermsOfUseAccepted\" : true,\n  \"Organization\" : \"Organization\",\n  \"Email\" : \"Email\",\n  \"FirstName\" : \"FirstName\",\n  \"Phone\" : \"Phone\",\n  \"MembershipStateDescription\" : \"MembershipStateDescription\",\n  \"HasAvailableUserCard\" : true,\n  \"Id\" : 0,\n  \"LastName\" : \"LastName\",\n  \"IsRecurringPaymentsActive\" : true,\n  \"Url\" : \"Url\"\n}";

            // var example =
            //     exampleJson != null
            //         ? JsonConvert.DeserializeObject<ContactMe>(exampleJson)
            //         : default(ContactMe); //TODO: Change the data returned
            // return new ObjectResult(example);
            return await GetAsync<ContactMe>(
                $"{BasePath}{accountId}/contacts/me?includeDetails={includeDetails}"
            );
        }

        /// <summary>
        /// Update the current user information
        /// </summary>
        /// <remarks>Update the current user information. Pass the fieldValues those need to be changed. </remarks>
        /// <param name="body"></param>
        /// <param name="accountId">Your account identifier</param>
        /// <response code="200">Brief information about the current user </response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpPut]
        [Route("{accountId}/contacts/me")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdContactsMePut")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(Contact),
            description: "Brief information about the current user "
        )]
        public virtual IActionResult AccountsAccountIdContactsMePut(
            [FromBody] Contact body,
            [FromRoute] [Required] decimal? accountId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Contact));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "{\n  \"Organization\" : \"Organization\",\n  \"Email\" : \"Email\",\n  \"MembershipLevel\" : {\n    \"Id\" : 6,\n    \"Name\" : \"Name\"\n  },\n  \"FirstName\" : \"FirstName\",\n  \"Phone\" : \"Phone\",\n  \"SendMessageAllowed\" : true,\n  \"Id\" : 0,\n  \"LastName\" : \"LastName\",\n  \"FieldValues\" : [ {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  }, {\n    \"FieldOrder\" : 1,\n    \"SystemCode\" : \"SystemCode\",\n    \"Value\" : { },\n    \"FieldName\" : \"FieldName\",\n    \"FieldType\" : \"String\"\n  } ],\n  \"Url\" : \"Url\"\n}";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<Contact>(exampleJson)
                    : default(Contact); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List of membership levels visible to the current user.
        /// </summary>
        /// <remarks>- -- </remarks>
        /// <param name="accountId">Your account identifier</param>
        /// <response code="200">Array of level descriptions</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        /// <response code="428">Current user should accept terms of use before using API. It can be done in web interface, or by making a POST request to /rpc/{accountId}/acceptTermsOfUse</response>
        /// <response code="429">On too many requests from same account. Wait for a minute and try again.</response>
        [HttpGet]
        [Route("{accountId}/membershiplevels")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdMembershiplevelsGet")]
        [SwaggerResponse(
            statusCode: 200,
            type: typeof(MembershipLevel),
            description: "Array of level descriptions"
        )]
        public virtual IActionResult AccountsAccountIdMembershiplevelsGet(
            [FromRoute] [Required] decimal? accountId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MembershipLevel));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 428 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(428);

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson =
                "{\n  \"Type\" : \"Individual\",\n  \"MembershipFee\" : 6.027456183070403,\n  \"Description\" : \"Description\",\n  \"AutomaticRecurringPayments\" : true,\n  \"MemberCanChangeToLevels\" : [ null, null ],\n  \"PaymentMethod\" : \"OnlineAndOffline\",\n  \"Id\" : 0,\n  \"BundleMembersLimit\" : 1,\n  \"DiscountCouponExists\" : true,\n  \"Url\" : \"Url\",\n  \"RenewalPeriod\" : {\n    \"YearPeriod\" : 5,\n    \"Kind\" : \"Never\",\n    \"StartFromJoinDate\" : true,\n    \"Dates\" : [ {\n      \"Month\" : 5,\n      \"Day\" : 2\n    }, {\n      \"Month\" : 5,\n      \"Day\" : 2\n    } ],\n    \"RenewalLimits\" : {\n      \"ExpirationPeriod\" : {\n        \"PeriodType\" : \"Days\",\n        \"Active\" : true,\n        \"Length\" : 7\n      },\n      \"OnePeriodAhead\" : true\n    }\n  },\n  \"Name\" : \"Name\"\n}";

            var example =
                exampleJson != null
                    ? JsonConvert.DeserializeObject<MembershipLevel>(exampleJson)
                    : default(MembershipLevel); //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Accepts terms of use.
        /// </summary>
        /// <remarks>Accepts terms of use for the currently loged in user. Does nothing if terms have been accepted already. </remarks>
        /// <param name="accountId">Your account identifier</param>
        /// <response code="200">OK</response>
        /// <response code="401">oAuth token was not provided, invalid or does not provide access to requested URL.</response>
        [HttpPost]
        [Route("/publicview/v1/rpc/{accountId}/acceptTermsOfUse")]
        [ValidateModelState]
        [SwaggerOperation("RpcAccountIdAcceptTermsOfUsePost")]
        public virtual IActionResult RpcAccountIdAcceptTermsOfUsePost(
            [FromRoute] [Required] decimal? accountId
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }
    }
}

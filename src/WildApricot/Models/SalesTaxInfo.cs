/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// An invoice item tax details
    /// </summary>
    [DataContract]
    public partial class SalesTaxInfo : IEquatable<SalesTaxInfo>
    {
        /// <summary>
        /// total gross amount including all taxes
        /// </summary>
        /// <value>total gross amount including all taxes</value>

        [DataMember(Name = "Amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// tax 1 amount
        /// </summary>
        /// <value>tax 1 amount</value>

        [DataMember(Name = "CalculatedTax1")]
        public decimal? CalculatedTax1 { get; set; }

        /// <summary>
        /// tax 2 amount
        /// </summary>
        /// <value>tax 2 amount</value>

        [DataMember(Name = "CalculatedTax2")]
        public decimal? CalculatedTax2 { get; set; }

        /// <summary>
        /// net amount from invoice items
        /// </summary>
        /// <value>net amount from invoice items</value>

        [DataMember(Name = "NetAmount")]
        public decimal? NetAmount { get; set; }

        /// <summary>
        /// rounded total amount including all taxes
        /// </summary>
        /// <value>rounded total amount including all taxes</value>

        [DataMember(Name = "RoundedAmount")]
        public decimal? RoundedAmount { get; set; }

        /// <summary>
        /// Gets or Sets Tax1
        /// </summary>

        [DataMember(Name = "Tax1")]
        public AllOfSalesTaxInfoTax1 Tax1 { get; set; }

        /// <summary>
        /// Gets or Sets Tax2
        /// </summary>

        [DataMember(Name = "Tax2")]
        public AllOfSalesTaxInfoTax2 Tax2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesTaxInfo {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CalculatedTax1: ").Append(CalculatedTax1).Append("\n");
            sb.Append("  CalculatedTax2: ").Append(CalculatedTax2).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  RoundedAmount: ").Append(RoundedAmount).Append("\n");
            sb.Append("  Tax1: ").Append(Tax1).Append("\n");
            sb.Append("  Tax2: ").Append(Tax2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((SalesTaxInfo)obj);
        }

        /// <summary>
        /// Returns true if SalesTaxInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of SalesTaxInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesTaxInfo other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Amount == other.Amount || Amount != null && Amount.Equals(other.Amount))
                && (
                    CalculatedTax1 == other.CalculatedTax1
                    || CalculatedTax1 != null && CalculatedTax1.Equals(other.CalculatedTax1)
                )
                && (
                    CalculatedTax2 == other.CalculatedTax2
                    || CalculatedTax2 != null && CalculatedTax2.Equals(other.CalculatedTax2)
                )
                && (
                    NetAmount == other.NetAmount
                    || NetAmount != null && NetAmount.Equals(other.NetAmount)
                )
                && (
                    RoundedAmount == other.RoundedAmount
                    || RoundedAmount != null && RoundedAmount.Equals(other.RoundedAmount)
                )
                && (Tax1 == other.Tax1 || Tax1 != null && Tax1.Equals(other.Tax1))
                && (Tax2 == other.Tax2 || Tax2 != null && Tax2.Equals(other.Tax2));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                if (CalculatedTax1 != null)
                    hashCode = hashCode * 59 + CalculatedTax1.GetHashCode();
                if (CalculatedTax2 != null)
                    hashCode = hashCode * 59 + CalculatedTax2.GetHashCode();
                if (NetAmount != null)
                    hashCode = hashCode * 59 + NetAmount.GetHashCode();
                if (RoundedAmount != null)
                    hashCode = hashCode * 59 + RoundedAmount.GetHashCode();
                if (Tax1 != null)
                    hashCode = hashCode * 59 + Tax1.GetHashCode();
                if (Tax2 != null)
                    hashCode = hashCode * 59 + Tax2.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(SalesTaxInfo left, SalesTaxInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SalesTaxInfo left, SalesTaxInfo right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

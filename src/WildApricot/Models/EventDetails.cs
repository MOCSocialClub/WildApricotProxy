/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// Additional details related to event.
    /// </summary>
    [DataContract]
    public partial class EventDetails : IEquatable<EventDetails>
    {
        /// <summary>
        /// HTML description of event.
        /// </summary>
        /// <value>HTML description of event.</value>
        [Required]
        [DataMember(Name = "DescriptionHtml")]
        public string DescriptionHtml { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>

        [DataMember(Name = "TimeZone")]
        public TimeZoneDescription TimeZone { get; set; }

        /// <summary>
        /// A list of available registration types (tickets). The list contains only types visible to current user.
        /// </summary>
        /// <value>A list of available registration types (tickets). The list contains only types visible to current user.</value>
        [Required]
        [DataMember(Name = "RegistrationTypes")]
        public List<EventRegistrationType> RegistrationTypes { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationStatistics
        /// </summary>
        [Required]
        [DataMember(Name = "RegistrationStatistics")]
        public EventRegistrationStatistics RegistrationStatistics { get; set; }

        /// <summary>
        /// Collection of fields for registration form.
        /// </summary>
        /// <value>Collection of fields for registration form.</value>
        [Required]
        [DataMember(Name = "EventRegistrationFields")]
        public List<EventRegistrationField> EventRegistrationFields { get; set; }

        /// <summary>
        /// Gets or Sets Organizer
        /// </summary>

        [DataMember(Name = "Organizer")]
        public AllOfEventDetailsOrganizer Organizer { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [Required]
        [DataMember(Name = "PaymentMethod")]
        public EventPaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationsPublicVisibility
        /// </summary>

        [DataMember(Name = "RegistrationsPublicVisibility")]
        public EventRegistrationsPublicVisibility RegistrationsPublicVisibility { get; set; }

        /// <summary>
        /// Shows if waitlist enabled for event
        /// </summary>
        /// <value>Shows if waitlist enabled for event</value>
        [Required]
        [DataMember(Name = "IsWaitlistEnabled")]
        public bool? IsWaitlistEnabled { get; set; }

        /// <summary>
        /// Gets or Sets WaitlistSettings
        /// </summary>

        [DataMember(Name = "WaitlistSettings")]
        public EventWaitlistSettings WaitlistSettings { get; set; }

        /// <summary>
        /// Shows if registration will be automatically canceled if not paid in specific timeout
        /// </summary>
        /// <value>Shows if registration will be automatically canceled if not paid in specific timeout</value>
        [Required]
        [DataMember(Name = "IsAutoCancelRegistrationEnabled")]
        public bool? IsAutoCancelRegistrationEnabled { get; set; }

        /// <summary>
        /// Number of minutes to pay for created event registration.
        /// </summary>
        /// <value>Number of minutes to pay for created event registration.</value>

        [DataMember(Name = "RegistrationAutoCancelTimeout")]
        public decimal? RegistrationAutoCancelTimeout { get; set; }

        /// <summary>
        /// Indicates whether a single contact can register multiple times for the event.
        /// </summary>
        /// <value>Indicates whether a single contact can register multiple times for the event.</value>
        [Required]
        [DataMember(Name = "MultipleRegistrationAllowed")]
        public bool? MultipleRegistrationAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventDetails {\n");
            sb.Append("  DescriptionHtml: ").Append(DescriptionHtml).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  RegistrationTypes: ").Append(RegistrationTypes).Append("\n");
            sb.Append("  RegistrationStatistics: ").Append(RegistrationStatistics).Append("\n");
            sb.Append("  EventRegistrationFields: ").Append(EventRegistrationFields).Append("\n");
            sb.Append("  Organizer: ").Append(Organizer).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  RegistrationsPublicVisibility: ")
                .Append(RegistrationsPublicVisibility)
                .Append("\n");
            sb.Append("  IsWaitlistEnabled: ").Append(IsWaitlistEnabled).Append("\n");
            sb.Append("  WaitlistSettings: ").Append(WaitlistSettings).Append("\n");
            sb.Append("  IsAutoCancelRegistrationEnabled: ")
                .Append(IsAutoCancelRegistrationEnabled)
                .Append("\n");
            sb.Append("  RegistrationAutoCancelTimeout: ")
                .Append(RegistrationAutoCancelTimeout)
                .Append("\n");
            sb.Append("  MultipleRegistrationAllowed: ")
                .Append(MultipleRegistrationAllowed)
                .Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((EventDetails)obj);
        }

        /// <summary>
        /// Returns true if EventDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of EventDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventDetails other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    DescriptionHtml == other.DescriptionHtml
                    || DescriptionHtml != null && DescriptionHtml.Equals(other.DescriptionHtml)
                )
                && (
                    TimeZone == other.TimeZone
                    || TimeZone != null && TimeZone.Equals(other.TimeZone)
                )
                && (
                    RegistrationTypes == other.RegistrationTypes
                    || RegistrationTypes != null
                        && RegistrationTypes.SequenceEqual(other.RegistrationTypes)
                )
                && (
                    RegistrationStatistics == other.RegistrationStatistics
                    || RegistrationStatistics != null
                        && RegistrationStatistics.Equals(other.RegistrationStatistics)
                )
                && (
                    EventRegistrationFields == other.EventRegistrationFields
                    || EventRegistrationFields != null
                        && EventRegistrationFields.SequenceEqual(other.EventRegistrationFields)
                )
                && (
                    Organizer == other.Organizer
                    || Organizer != null && Organizer.Equals(other.Organizer)
                )
                && (
                    PaymentMethod == other.PaymentMethod
                    || PaymentMethod != null && PaymentMethod.Equals(other.PaymentMethod)
                )
                && (
                    RegistrationsPublicVisibility == other.RegistrationsPublicVisibility
                    || RegistrationsPublicVisibility != null
                        && RegistrationsPublicVisibility.Equals(other.RegistrationsPublicVisibility)
                )
                && (
                    IsWaitlistEnabled == other.IsWaitlistEnabled
                    || IsWaitlistEnabled != null
                        && IsWaitlistEnabled.Equals(other.IsWaitlistEnabled)
                )
                && (
                    WaitlistSettings == other.WaitlistSettings
                    || WaitlistSettings != null && WaitlistSettings.Equals(other.WaitlistSettings)
                )
                && (
                    IsAutoCancelRegistrationEnabled == other.IsAutoCancelRegistrationEnabled
                    || IsAutoCancelRegistrationEnabled != null
                        && IsAutoCancelRegistrationEnabled.Equals(
                            other.IsAutoCancelRegistrationEnabled
                        )
                )
                && (
                    RegistrationAutoCancelTimeout == other.RegistrationAutoCancelTimeout
                    || RegistrationAutoCancelTimeout != null
                        && RegistrationAutoCancelTimeout.Equals(other.RegistrationAutoCancelTimeout)
                )
                && (
                    MultipleRegistrationAllowed == other.MultipleRegistrationAllowed
                    || MultipleRegistrationAllowed != null
                        && MultipleRegistrationAllowed.Equals(other.MultipleRegistrationAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (DescriptionHtml != null)
                    hashCode = hashCode * 59 + DescriptionHtml.GetHashCode();
                if (TimeZone != null)
                    hashCode = hashCode * 59 + TimeZone.GetHashCode();
                if (RegistrationTypes != null)
                    hashCode = hashCode * 59 + RegistrationTypes.GetHashCode();
                if (RegistrationStatistics != null)
                    hashCode = hashCode * 59 + RegistrationStatistics.GetHashCode();
                if (EventRegistrationFields != null)
                    hashCode = hashCode * 59 + EventRegistrationFields.GetHashCode();
                if (Organizer != null)
                    hashCode = hashCode * 59 + Organizer.GetHashCode();
                if (PaymentMethod != null)
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                if (RegistrationsPublicVisibility != null)
                    hashCode = hashCode * 59 + RegistrationsPublicVisibility.GetHashCode();
                if (IsWaitlistEnabled != null)
                    hashCode = hashCode * 59 + IsWaitlistEnabled.GetHashCode();
                if (WaitlistSettings != null)
                    hashCode = hashCode * 59 + WaitlistSettings.GetHashCode();
                if (IsAutoCancelRegistrationEnabled != null)
                    hashCode = hashCode * 59 + IsAutoCancelRegistrationEnabled.GetHashCode();
                if (RegistrationAutoCancelTimeout != null)
                    hashCode = hashCode * 59 + RegistrationAutoCancelTimeout.GetHashCode();
                if (MultipleRegistrationAllowed != null)
                    hashCode = hashCode * 59 + MultipleRegistrationAllowed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EventDetails left, EventDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventDetails left, EventDetails right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

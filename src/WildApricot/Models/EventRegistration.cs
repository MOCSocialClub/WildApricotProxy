/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// A record of registration for an event.
    /// </summary>
    [DataContract]
    public partial class EventRegistration : IEquatable<EventRegistration>
    {
        /// <summary>
        /// Unique event registration identifier
        /// </summary>
        /// <value>Unique event registration identifier</value>
        [Required]
        [DataMember(Name = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [Required]
        [DataMember(Name = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets _Event
        /// </summary>
        [Required]
        [DataMember(Name = "Event")]
        public EventStub _Event { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationType
        /// </summary>
        [Required]
        [DataMember(Name = "RegistrationType")]
        public LinkedItemWithName RegistrationType { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>

        [DataMember(Name = "Invoice")]
        public LinkedItem Invoice { get; set; }

        /// <summary>
        /// Total registration fee, including all taxes and discounts.
        /// </summary>
        /// <value>Total registration fee, including all taxes and discounts.</value>

        [DataMember(Name = "RegistrationFee")]
        public decimal? RegistrationFee { get; set; }

        /// <summary>
        /// The value that was already paid.
        /// </summary>
        /// <value>The value that was already paid.</value>

        [DataMember(Name = "PaidAmount")]
        public decimal? PaidAmount { get; set; }

        /// <summary>
        /// Indicates whether to include this registrant in the public list of registrants.
        /// </summary>
        /// <value>Indicates whether to include this registrant in the public list of registrants.</value>
        [Required]
        [DataMember(Name = "ShowToPublic")]
        public bool? ShowToPublic { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationFields
        /// </summary>

        [DataMember(Name = "RegistrationFields")]
        public List<CustomFieldValue> RegistrationFields { get; set; }

        /// <summary>
        /// Indicates whether there are event registrations with parent registration id equal to id of current registration. In order to get child registrations make a call to /accounts/XXX/eventregistrations?parentRegistrationId&#x3D;YYY
        /// </summary>
        /// <value>Indicates whether there are event registrations with parent registration id equal to id of current registration. In order to get child registrations make a call to /accounts/XXX/eventregistrations?parentRegistrationId&#x3D;YYY</value>

        [DataMember(Name = "HasChildRegistrations")]
        public bool? HasChildRegistrations { get; set; }

        /// <summary>
        /// Number of guests in this registration. This number does not include child registrations.
        /// </summary>
        /// <value>Number of guests in this registration. This number does not include child registrations.</value>

        [DataMember(Name = "NumberOfGuests")]
        public int? NumberOfGuests { get; set; }

        /// <summary>
        /// Gets or Sets IsGuestRegistration
        /// </summary>
        [Required]
        [DataMember(Name = "IsGuestRegistration")]
        public bool? IsGuestRegistration { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name = "Status")]
        public EventRegistrationStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets ParentRegistration
        /// </summary>

        [DataMember(Name = "ParentRegistration")]
        public LinkedItem ParentRegistration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventRegistration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  _Event: ").Append(_Event).Append("\n");
            sb.Append("  RegistrationType: ").Append(RegistrationType).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  RegistrationFee: ").Append(RegistrationFee).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  ShowToPublic: ").Append(ShowToPublic).Append("\n");
            sb.Append("  RegistrationFields: ").Append(RegistrationFields).Append("\n");
            sb.Append("  HasChildRegistrations: ").Append(HasChildRegistrations).Append("\n");
            sb.Append("  NumberOfGuests: ").Append(NumberOfGuests).Append("\n");
            sb.Append("  IsGuestRegistration: ").Append(IsGuestRegistration).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ParentRegistration: ").Append(ParentRegistration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((EventRegistration)obj);
        }

        /// <summary>
        /// Returns true if EventRegistration instances are equal
        /// </summary>
        /// <param name="other">Instance of EventRegistration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventRegistration other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Id == other.Id || Id != null && Id.Equals(other.Id))
                && (Url == other.Url || Url != null && Url.Equals(other.Url))
                && (_Event == other._Event || _Event != null && _Event.Equals(other._Event))
                && (
                    RegistrationType == other.RegistrationType
                    || RegistrationType != null && RegistrationType.Equals(other.RegistrationType)
                )
                && (Invoice == other.Invoice || Invoice != null && Invoice.Equals(other.Invoice))
                && (
                    RegistrationFee == other.RegistrationFee
                    || RegistrationFee != null && RegistrationFee.Equals(other.RegistrationFee)
                )
                && (
                    PaidAmount == other.PaidAmount
                    || PaidAmount != null && PaidAmount.Equals(other.PaidAmount)
                )
                && (
                    ShowToPublic == other.ShowToPublic
                    || ShowToPublic != null && ShowToPublic.Equals(other.ShowToPublic)
                )
                && (
                    RegistrationFields == other.RegistrationFields
                    || RegistrationFields != null
                        && RegistrationFields.SequenceEqual(other.RegistrationFields)
                )
                && (
                    HasChildRegistrations == other.HasChildRegistrations
                    || HasChildRegistrations != null
                        && HasChildRegistrations.Equals(other.HasChildRegistrations)
                )
                && (
                    NumberOfGuests == other.NumberOfGuests
                    || NumberOfGuests != null && NumberOfGuests.Equals(other.NumberOfGuests)
                )
                && (
                    IsGuestRegistration == other.IsGuestRegistration
                    || IsGuestRegistration != null
                        && IsGuestRegistration.Equals(other.IsGuestRegistration)
                )
                && (Status == other.Status || Status != null && Status.Equals(other.Status))
                && (
                    ParentRegistration == other.ParentRegistration
                    || ParentRegistration != null
                        && ParentRegistration.Equals(other.ParentRegistration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (_Event != null)
                    hashCode = hashCode * 59 + _Event.GetHashCode();
                if (RegistrationType != null)
                    hashCode = hashCode * 59 + RegistrationType.GetHashCode();
                if (Invoice != null)
                    hashCode = hashCode * 59 + Invoice.GetHashCode();
                if (RegistrationFee != null)
                    hashCode = hashCode * 59 + RegistrationFee.GetHashCode();
                if (PaidAmount != null)
                    hashCode = hashCode * 59 + PaidAmount.GetHashCode();
                if (ShowToPublic != null)
                    hashCode = hashCode * 59 + ShowToPublic.GetHashCode();
                if (RegistrationFields != null)
                    hashCode = hashCode * 59 + RegistrationFields.GetHashCode();
                if (HasChildRegistrations != null)
                    hashCode = hashCode * 59 + HasChildRegistrations.GetHashCode();
                if (NumberOfGuests != null)
                    hashCode = hashCode * 59 + NumberOfGuests.GetHashCode();
                if (IsGuestRegistration != null)
                    hashCode = hashCode * 59 + IsGuestRegistration.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (ParentRegistration != null)
                    hashCode = hashCode * 59 + ParentRegistration.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EventRegistration left, EventRegistration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventRegistration left, EventRegistration right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

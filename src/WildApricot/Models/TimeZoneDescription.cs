/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// The timezone where an event will take place. If missing, then default timezone for this account is  used.
    /// </summary>
    [DataContract]
    public partial class TimeZoneDescription : IEquatable<TimeZoneDescription>
    {
        /// <summary>
        /// Gets or Sets ZoneId
        /// </summary>

        [DataMember(Name = "ZoneId")]
        public string ZoneId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UtcOffset
        /// </summary>
        [Required]
        [DataMember(Name = "UtcOffset")]
        public decimal? UtcOffset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeZoneDescription {\n");
            sb.Append("  ZoneId: ").Append(ZoneId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UtcOffset: ").Append(UtcOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((TimeZoneDescription)obj);
        }

        /// <summary>
        /// Returns true if TimeZoneDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of TimeZoneDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeZoneDescription other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (ZoneId == other.ZoneId || ZoneId != null && ZoneId.Equals(other.ZoneId))
                && (Name == other.Name || Name != null && Name.Equals(other.Name))
                && (
                    UtcOffset == other.UtcOffset
                    || UtcOffset != null && UtcOffset.Equals(other.UtcOffset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ZoneId != null)
                    hashCode = hashCode * 59 + ZoneId.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (UtcOffset != null)
                    hashCode = hashCode * 59 + UtcOffset.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(TimeZoneDescription left, TimeZoneDescription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TimeZoneDescription left, TimeZoneDescription right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// This property applies to CalculatedExtraCharge fields only.
    /// </summary>
    [DataContract]
    public partial class CustomFieldExtraChargeInfo : IEquatable<CustomFieldExtraChargeInfo>
    {
        /// <summary>
        /// Gets or Sets MultiplierType
        /// </summary>
        [Required]
        [DataMember(Name = "MultiplierType")]
        public ExtraChargeMultiplierType MultiplierType { get; set; }

        /// <summary>
        /// value of multiplier for extra charge calculation
        /// </summary>
        /// <value>value of multiplier for extra charge calculation</value>
        [Required]
        [DataMember(Name = "Multiplier")]
        public decimal? Multiplier { get; set; }

        /// <summary>
        /// Minimum amount of items to request (minimal field value). Applies to ItemPrice multiplier type only.
        /// </summary>
        /// <value>Minimum amount of items to request (minimal field value). Applies to ItemPrice multiplier type only. </value>

        [DataMember(Name = "MinAmount")]
        public int? MinAmount { get; set; }

        /// <summary>
        /// Maximum amount of items to request (maximum field value). Applies to ItemPrice multiplier type only.
        /// </summary>
        /// <value>Maximum amount of items to request (maximum field value). Applies to ItemPrice multiplier type only. </value>

        [DataMember(Name = "MaxAmount")]
        public int? MaxAmount { get; set; }

        /// <summary>
        /// Minimum extra charge. Applies to Percentage multiplier type only.
        /// </summary>
        /// <value>Minimum extra charge. Applies to Percentage multiplier type only. </value>

        [DataMember(Name = "MinCharge")]
        public decimal? MinCharge { get; set; }

        /// <summary>
        /// Maximum extra charge. Applies to Percentage multiplier type only.
        /// </summary>
        /// <value>Maximum extra charge. Applies to Percentage multiplier type only. </value>

        [DataMember(Name = "MaxCharge")]
        public decimal? MaxCharge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldExtraChargeInfo {\n");
            sb.Append("  MultiplierType: ").Append(MultiplierType).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  MinCharge: ").Append(MinCharge).Append("\n");
            sb.Append("  MaxCharge: ").Append(MaxCharge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((CustomFieldExtraChargeInfo)obj);
        }

        /// <summary>
        /// Returns true if CustomFieldExtraChargeInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomFieldExtraChargeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldExtraChargeInfo other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    MultiplierType == other.MultiplierType
                    || MultiplierType != null && MultiplierType.Equals(other.MultiplierType)
                )
                && (
                    Multiplier == other.Multiplier
                    || Multiplier != null && Multiplier.Equals(other.Multiplier)
                )
                && (
                    MinAmount == other.MinAmount
                    || MinAmount != null && MinAmount.Equals(other.MinAmount)
                )
                && (
                    MaxAmount == other.MaxAmount
                    || MaxAmount != null && MaxAmount.Equals(other.MaxAmount)
                )
                && (
                    MinCharge == other.MinCharge
                    || MinCharge != null && MinCharge.Equals(other.MinCharge)
                )
                && (
                    MaxCharge == other.MaxCharge
                    || MaxCharge != null && MaxCharge.Equals(other.MaxCharge)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (MultiplierType != null)
                    hashCode = hashCode * 59 + MultiplierType.GetHashCode();
                if (Multiplier != null)
                    hashCode = hashCode * 59 + Multiplier.GetHashCode();
                if (MinAmount != null)
                    hashCode = hashCode * 59 + MinAmount.GetHashCode();
                if (MaxAmount != null)
                    hashCode = hashCode * 59 + MaxAmount.GetHashCode();
                if (MinCharge != null)
                    hashCode = hashCode * 59 + MinCharge.GetHashCode();
                if (MaxCharge != null)
                    hashCode = hashCode * 59 + MaxCharge.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            CustomFieldExtraChargeInfo left,
            CustomFieldExtraChargeInfo right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            CustomFieldExtraChargeInfo left,
            CustomFieldExtraChargeInfo right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

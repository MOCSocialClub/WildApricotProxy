/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class PaymentMethodTypeDescription : IEquatable<PaymentMethodTypeDescription>
    {
        /// <summary>
        /// Payment method type ID
        /// </summary>
        /// <value>Payment method type ID</value>
        [Required]
        [DataMember(Name = "PaymentMethodType")]
        public string PaymentMethodType { get; set; }

        /// <summary>
        /// Payment method description
        /// </summary>
        /// <value>Payment method description</value>
        [Required]
        [DataMember(Name = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethodTypeDescription {\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((PaymentMethodTypeDescription)obj);
        }

        /// <summary>
        /// Returns true if PaymentMethodTypeDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentMethodTypeDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodTypeDescription other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    PaymentMethodType == other.PaymentMethodType
                    || PaymentMethodType != null
                        && PaymentMethodType.Equals(other.PaymentMethodType)
                )
                && (
                    Description == other.Description
                    || Description != null && Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (PaymentMethodType != null)
                    hashCode = hashCode * 59 + PaymentMethodType.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            PaymentMethodTypeDescription left,
            PaymentMethodTypeDescription right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            PaymentMethodTypeDescription left,
            PaymentMethodTypeDescription right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

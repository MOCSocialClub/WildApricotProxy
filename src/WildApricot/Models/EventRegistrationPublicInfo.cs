/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class EventRegistrationPublicInfo : IEquatable<EventRegistrationPublicInfo>
    {
        /// <summary>
        /// Unique identifier of event registration
        /// </summary>
        /// <value>Unique identifier of event registration</value>
        [Required]
        [DataMember(Name = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [Required]
        [DataMember(Name = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// Registration first name.
        /// </summary>
        /// <value>Registration first name.</value>
        [Required]
        [DataMember(Name = "FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Registration last name.
        /// </summary>
        /// <value>Registration last name.</value>
        [Required]
        [DataMember(Name = "LastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Registration organization name.
        /// </summary>
        /// <value>Registration organization name.</value>
        [Required]
        [DataMember(Name = "Organization")]
        public string Organization { get; set; }

        /// <summary>
        /// Id of contact with public-enabled membership (absent if registration contact is not a member or profile not enabled to public).
        /// </summary>
        /// <value>Id of contact with public-enabled membership (absent if registration contact is not a member or profile not enabled to public).</value>
        [Required]
        [DataMember(Name = "ContactId")]
        public int? ContactId { get; set; }

        /// <summary>
        /// Number of additionally registered guests.
        /// </summary>
        /// <value>Number of additionally registered guests.</value>
        [Required]
        [DataMember(Name = "NumberOfGuests")]
        public int? NumberOfGuests { get; set; }

        /// <summary>
        /// Date and time when registration was created. (Account local time)
        /// </summary>
        /// <value>Date and time when registration was created. (Account local time)</value>
        [Required]
        [DataMember(Name = "RegistrationDate")]
        public string RegistrationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventRegistrationPublicInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  NumberOfGuests: ").Append(NumberOfGuests).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((EventRegistrationPublicInfo)obj);
        }

        /// <summary>
        /// Returns true if EventRegistrationPublicInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of EventRegistrationPublicInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventRegistrationPublicInfo other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Id == other.Id || Id != null && Id.Equals(other.Id))
                && (Url == other.Url || Url != null && Url.Equals(other.Url))
                && (
                    FirstName == other.FirstName
                    || FirstName != null && FirstName.Equals(other.FirstName)
                )
                && (
                    LastName == other.LastName
                    || LastName != null && LastName.Equals(other.LastName)
                )
                && (
                    Organization == other.Organization
                    || Organization != null && Organization.Equals(other.Organization)
                )
                && (
                    ContactId == other.ContactId
                    || ContactId != null && ContactId.Equals(other.ContactId)
                )
                && (
                    NumberOfGuests == other.NumberOfGuests
                    || NumberOfGuests != null && NumberOfGuests.Equals(other.NumberOfGuests)
                )
                && (
                    RegistrationDate == other.RegistrationDate
                    || RegistrationDate != null && RegistrationDate.Equals(other.RegistrationDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                if (ContactId != null)
                    hashCode = hashCode * 59 + ContactId.GetHashCode();
                if (NumberOfGuests != null)
                    hashCode = hashCode * 59 + NumberOfGuests.GetHashCode();
                if (RegistrationDate != null)
                    hashCode = hashCode * 59 + RegistrationDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            EventRegistrationPublicInfo left,
            EventRegistrationPublicInfo right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            EventRegistrationPublicInfo left,
            EventRegistrationPublicInfo right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

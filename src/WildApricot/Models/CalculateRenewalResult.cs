/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class CalculateRenewalResult : IEquatable<CalculateRenewalResult>
    {
        /// <summary>
        /// Gets or Sets NewLevel
        /// </summary>
        [Required]
        [DataMember(Name = "NewLevel")]
        public LinkedItem NewLevel { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>

        [DataMember(Name = "Invoice")]
        public LinkedItem Invoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalculateRenewalResult {\n");
            sb.Append("  NewLevel: ").Append(NewLevel).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((CalculateRenewalResult)obj);
        }

        /// <summary>
        /// Returns true if CalculateRenewalResult instances are equal
        /// </summary>
        /// <param name="other">Instance of CalculateRenewalResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculateRenewalResult other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    NewLevel == other.NewLevel
                    || NewLevel != null && NewLevel.Equals(other.NewLevel)
                ) && (Invoice == other.Invoice || Invoice != null && Invoice.Equals(other.Invoice));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (NewLevel != null)
                    hashCode = hashCode * 59 + NewLevel.GetHashCode();
                if (Invoice != null)
                    hashCode = hashCode * 59 + Invoice.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CalculateRenewalResult left, CalculateRenewalResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CalculateRenewalResult left, CalculateRenewalResult right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// Contains a collection of contacts or number of contacts or list of contact identifiers, depending on passed query parameters.
    /// </summary>
    [DataContract]
    public partial class ContactsResponse : IEquatable<ContactsResponse>
    {
        /// <summary>
        /// List of contacts found.
        /// </summary>
        /// <value>List of contacts found.</value>

        [DataMember(Name = "Contacts")]
        public List<Contact> Contacts { get; set; }

        /// <summary>
        /// List of contact IDs found.
        /// </summary>
        /// <value>List of contact IDs found.</value>

        [DataMember(Name = "ContactIdentifiers")]
        public List<int?> ContactIdentifiers { get; set; }

        /// <summary>
        /// Number of contacts found. Value appears only if $count was passed in parameters.
        /// </summary>
        /// <value>Number of contacts found. Value appears only if $count was passed in parameters.</value>

        [DataMember(Name = "Count")]
        public int? Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactsResponse {\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  ContactIdentifiers: ").Append(ContactIdentifiers).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((ContactsResponse)obj);
        }

        /// <summary>
        /// Returns true if ContactsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactsResponse other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    Contacts == other.Contacts
                    || Contacts != null && Contacts.SequenceEqual(other.Contacts)
                )
                && (
                    ContactIdentifiers == other.ContactIdentifiers
                    || ContactIdentifiers != null
                        && ContactIdentifiers.SequenceEqual(other.ContactIdentifiers)
                )
                && (Count == other.Count || Count != null && Count.Equals(other.Count));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                if (ContactIdentifiers != null)
                    hashCode = hashCode * 59 + ContactIdentifiers.GetHashCode();
                if (Count != null)
                    hashCode = hashCode * 59 + Count.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ContactsResponse left, ContactsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactsResponse left, ContactsResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

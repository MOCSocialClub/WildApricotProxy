/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// An invoice item
    /// </summary>
    [DataContract]
    public partial class OrderDetail : IEquatable<OrderDetail>
    {
        /// <summary>
        /// Sum to pay for this a single item. Can be negative in case of discount.
        /// </summary>
        /// <value>Sum to pay for this a single item. Can be negative in case of discount.</value>

        [DataMember(Name = "Price")]
        public decimal? Price { get; set; }

        /// <summary>
        /// Quantity of item
        /// </summary>
        /// <value>Quantity of item</value>

        [DataMember(Name = "Quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Explanation for the item.
        /// </summary>
        /// <value>Explanation for the item.</value>

        [DataMember(Name = "Notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets OrderDetailType
        /// </summary>

        [DataMember(Name = "OrderDetailType")]
        public OrderDetailType OrderDetailType { get; set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>

        [DataMember(Name = "Taxes")]
        public SalesTaxInfo Taxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDetail {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OrderDetailType: ").Append(OrderDetailType).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((OrderDetail)obj);
        }

        /// <summary>
        /// Returns true if OrderDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDetail other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Price == other.Price || Price != null && Price.Equals(other.Price))
                && (
                    Quantity == other.Quantity
                    || Quantity != null && Quantity.Equals(other.Quantity)
                )
                && (Notes == other.Notes || Notes != null && Notes.Equals(other.Notes))
                && (
                    OrderDetailType == other.OrderDetailType
                    || OrderDetailType != null && OrderDetailType.Equals(other.OrderDetailType)
                )
                && (Taxes == other.Taxes || Taxes != null && Taxes.Equals(other.Taxes));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                if (OrderDetailType != null)
                    hashCode = hashCode * 59 + OrderDetailType.GetHashCode();
                if (Taxes != null)
                    hashCode = hashCode * 59 + Taxes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(OrderDetail left, OrderDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderDetail left, OrderDetail right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

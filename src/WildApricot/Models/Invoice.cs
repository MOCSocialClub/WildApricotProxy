/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class Invoice : IEquatable<Invoice>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [Required]
        [DataMember(Name = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// Full value (amount) of this invoice, using account&#x27;s primary currency.
        /// </summary>
        /// <value>Full value (amount) of this invoice, using account&#x27;s primary currency.</value>
        [Required]
        [DataMember(Name = "Value")]
        public decimal? Value { get; set; }

        /// <summary>
        /// Autoincremented for each subsequent invoice.
        /// </summary>
        /// <value>Autoincremented for each subsequent invoice.</value>
        [Required]
        [DataMember(Name = "DocumentNumber")]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Date and time when invoice was created
        /// </summary>
        /// <value>Date and time when invoice was created</value>
        [Required]
        [DataMember(Name = "DocumentDate")]
        public DateTime? DocumentDate { get; set; }

        /// <summary>
        /// Sum of invoice already paid.
        /// </summary>
        /// <value>Sum of invoice already paid.</value>
        [Required]
        [DataMember(Name = "PaidAmount")]
        public decimal? PaidAmount { get; set; }

        /// <summary>
        /// Indicates whether invoice is fully paid
        /// </summary>
        /// <value>Indicates whether invoice is fully paid</value>
        [Required]
        [DataMember(Name = "FullyPaid")]
        public bool? FullyPaid { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [Required]
        [DataMember(Name = "OrderType")]
        public InvoiceOrderType OrderType { get; set; }

        /// <summary>
        /// Collection of invoice subitems.
        /// </summary>
        /// <value>Collection of invoice subitems.</value>

        [DataMember(Name = "OrderDetails")]
        public List<OrderDetail> OrderDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  DocumentDate: ").Append(DocumentDate).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  FullyPaid: ").Append(FullyPaid).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  OrderDetails: ").Append(OrderDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((Invoice)obj);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="other">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Id == other.Id || Id != null && Id.Equals(other.Id))
                && (Url == other.Url || Url != null && Url.Equals(other.Url))
                && (Value == other.Value || Value != null && Value.Equals(other.Value))
                && (
                    DocumentNumber == other.DocumentNumber
                    || DocumentNumber != null && DocumentNumber.Equals(other.DocumentNumber)
                )
                && (
                    DocumentDate == other.DocumentDate
                    || DocumentDate != null && DocumentDate.Equals(other.DocumentDate)
                )
                && (
                    PaidAmount == other.PaidAmount
                    || PaidAmount != null && PaidAmount.Equals(other.PaidAmount)
                )
                && (
                    FullyPaid == other.FullyPaid
                    || FullyPaid != null && FullyPaid.Equals(other.FullyPaid)
                )
                && (
                    OrderType == other.OrderType
                    || OrderType != null && OrderType.Equals(other.OrderType)
                )
                && (
                    OrderDetails == other.OrderDetails
                    || OrderDetails != null && OrderDetails.SequenceEqual(other.OrderDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                if (DocumentNumber != null)
                    hashCode = hashCode * 59 + DocumentNumber.GetHashCode();
                if (DocumentDate != null)
                    hashCode = hashCode * 59 + DocumentDate.GetHashCode();
                if (PaidAmount != null)
                    hashCode = hashCode * 59 + PaidAmount.GetHashCode();
                if (FullyPaid != null)
                    hashCode = hashCode * 59 + FullyPaid.GetHashCode();
                if (OrderType != null)
                    hashCode = hashCode * 59 + OrderType.GetHashCode();
                if (OrderDetails != null)
                    hashCode = hashCode * 59 + OrderDetails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Invoice left, Invoice right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Invoice left, Invoice right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

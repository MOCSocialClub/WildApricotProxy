/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// All registrations on event distinguished by kind.
    /// </summary>
    [DataContract]
    public partial class EventRegistrationStatistics : IEquatable<EventRegistrationStatistics>
    {
        /// <summary>
        /// The current number of paid registrants for this event.
        /// </summary>
        /// <value>The current number of paid registrants for this event.</value>
        [Required]
        [DataMember(Name = "RegistrationsPaidCount")]
        public int? RegistrationsPaidCount { get; set; }

        /// <summary>
        /// The current number of unpaid registrants for this event.
        /// </summary>
        /// <value>The current number of unpaid registrants for this event.</value>
        [Required]
        [DataMember(Name = "RegistrationsUnpaidCount")]
        public int? RegistrationsUnpaidCount { get; set; }

        /// <summary>
        /// The current number of canceled registrants for this event.
        /// </summary>
        /// <value>The current number of canceled registrants for this event.</value>
        [Required]
        [DataMember(Name = "RegistrationsCanceledCount")]
        public int? RegistrationsCanceledCount { get; set; }

        /// <summary>
        /// The current number of free registrants for this event.
        /// </summary>
        /// <value>The current number of free registrants for this event.</value>
        [Required]
        [DataMember(Name = "RegistrationsFreeCount")]
        public int? RegistrationsFreeCount { get; set; }

        /// <summary>
        /// The current number of partially paid registrants for this event.
        /// </summary>
        /// <value>The current number of partially paid registrants for this event.</value>
        [Required]
        [DataMember(Name = "RegistrationsPartiallyPaidCount")]
        public int? RegistrationsPartiallyPaidCount { get; set; }

        /// <summary>
        /// The current number of registrants without invoice for this event.
        /// </summary>
        /// <value>The current number of registrants without invoice for this event.</value>
        [Required]
        [DataMember(Name = "RegistrationsWithNoInvoiceCount")]
        public int? RegistrationsWithNoInvoiceCount { get; set; }

        /// <summary>
        /// The current number of waitlisters for this event.
        /// </summary>
        /// <value>The current number of waitlisters for this event.</value>
        [Required]
        [DataMember(Name = "RegistrationsOnWaitlistCount")]
        public int? RegistrationsOnWaitlistCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventRegistrationStatistics {\n");
            sb.Append("  RegistrationsPaidCount: ").Append(RegistrationsPaidCount).Append("\n");
            sb.Append("  RegistrationsUnpaidCount: ").Append(RegistrationsUnpaidCount).Append("\n");
            sb.Append("  RegistrationsCanceledCount: ")
                .Append(RegistrationsCanceledCount)
                .Append("\n");
            sb.Append("  RegistrationsFreeCount: ").Append(RegistrationsFreeCount).Append("\n");
            sb.Append("  RegistrationsPartiallyPaidCount: ")
                .Append(RegistrationsPartiallyPaidCount)
                .Append("\n");
            sb.Append("  RegistrationsWithNoInvoiceCount: ")
                .Append(RegistrationsWithNoInvoiceCount)
                .Append("\n");
            sb.Append("  RegistrationsOnWaitlistCount: ")
                .Append(RegistrationsOnWaitlistCount)
                .Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((EventRegistrationStatistics)obj);
        }

        /// <summary>
        /// Returns true if EventRegistrationStatistics instances are equal
        /// </summary>
        /// <param name="other">Instance of EventRegistrationStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventRegistrationStatistics other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    RegistrationsPaidCount == other.RegistrationsPaidCount
                    || RegistrationsPaidCount != null
                        && RegistrationsPaidCount.Equals(other.RegistrationsPaidCount)
                )
                && (
                    RegistrationsUnpaidCount == other.RegistrationsUnpaidCount
                    || RegistrationsUnpaidCount != null
                        && RegistrationsUnpaidCount.Equals(other.RegistrationsUnpaidCount)
                )
                && (
                    RegistrationsCanceledCount == other.RegistrationsCanceledCount
                    || RegistrationsCanceledCount != null
                        && RegistrationsCanceledCount.Equals(other.RegistrationsCanceledCount)
                )
                && (
                    RegistrationsFreeCount == other.RegistrationsFreeCount
                    || RegistrationsFreeCount != null
                        && RegistrationsFreeCount.Equals(other.RegistrationsFreeCount)
                )
                && (
                    RegistrationsPartiallyPaidCount == other.RegistrationsPartiallyPaidCount
                    || RegistrationsPartiallyPaidCount != null
                        && RegistrationsPartiallyPaidCount.Equals(
                            other.RegistrationsPartiallyPaidCount
                        )
                )
                && (
                    RegistrationsWithNoInvoiceCount == other.RegistrationsWithNoInvoiceCount
                    || RegistrationsWithNoInvoiceCount != null
                        && RegistrationsWithNoInvoiceCount.Equals(
                            other.RegistrationsWithNoInvoiceCount
                        )
                )
                && (
                    RegistrationsOnWaitlistCount == other.RegistrationsOnWaitlistCount
                    || RegistrationsOnWaitlistCount != null
                        && RegistrationsOnWaitlistCount.Equals(other.RegistrationsOnWaitlistCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (RegistrationsPaidCount != null)
                    hashCode = hashCode * 59 + RegistrationsPaidCount.GetHashCode();
                if (RegistrationsUnpaidCount != null)
                    hashCode = hashCode * 59 + RegistrationsUnpaidCount.GetHashCode();
                if (RegistrationsCanceledCount != null)
                    hashCode = hashCode * 59 + RegistrationsCanceledCount.GetHashCode();
                if (RegistrationsFreeCount != null)
                    hashCode = hashCode * 59 + RegistrationsFreeCount.GetHashCode();
                if (RegistrationsPartiallyPaidCount != null)
                    hashCode = hashCode * 59 + RegistrationsPartiallyPaidCount.GetHashCode();
                if (RegistrationsWithNoInvoiceCount != null)
                    hashCode = hashCode * 59 + RegistrationsWithNoInvoiceCount.GetHashCode();
                if (RegistrationsOnWaitlistCount != null)
                    hashCode = hashCode * 59 + RegistrationsOnWaitlistCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            EventRegistrationStatistics left,
            EventRegistrationStatistics right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            EventRegistrationStatistics left,
            EventRegistrationStatistics right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

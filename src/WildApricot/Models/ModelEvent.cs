/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class ModelEvent : IEquatable<ModelEvent>
    {
        /// <summary>
        /// Unique event identifier
        /// </summary>
        /// <value>Unique event identifier</value>
        [Required]
        [DataMember(Name = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [Required]
        [DataMember(Name = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// Event title
        /// </summary>
        /// <value>Event title</value>
        [Required]
        [DataMember(Name = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// The location or address where event will take place.
        /// </summary>
        /// <value>The location or address where event will take place.</value>
        [Required]
        [DataMember(Name = "Location")]
        public string Location { get; set; }

        /// <summary>
        /// Date and optionally time when event starts.
        /// </summary>
        /// <value>Date and optionally time when event starts.</value>
        [Required]
        [DataMember(Name = "StartDate")]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Indicates whether start time was explicitly specified in StartDate. Value of false means StartDate contains date only.
        /// </summary>
        /// <value>Indicates whether start time was explicitly specified in StartDate. Value of false means StartDate contains date only.</value>

        [DataMember(Name = "StartTimeSpecified")]
        public bool? StartTimeSpecified { get; set; }

        /// <summary>
        /// Date and optionally time when event completes.
        /// </summary>
        /// <value>Date and optionally time when event completes.</value>

        [DataMember(Name = "EndDate")]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Indicates whether end time was explicitly specified in EndDate. Value of false means EndDate contains date only.
        /// </summary>
        /// <value>Indicates whether end time was explicitly specified in EndDate. Value of false means EndDate contains date only.</value>

        [DataMember(Name = "EndTimeSpecified")]
        public bool? EndTimeSpecified { get; set; }

        /// <summary>
        /// Indicates whether event is enabled for registration.
        /// </summary>
        /// <value>Indicates whether event is enabled for registration.</value>
        [Required]
        [DataMember(Name = "RegistrationEnabled")]
        public bool? RegistrationEnabled { get; set; }

        /// <summary>
        /// The registration limit for this event.
        /// </summary>
        /// <value>The registration limit for this event.</value>

        [DataMember(Name = "RegistrationsLimit")]
        public int? RegistrationsLimit { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>

        [DataMember(Name = "Details")]
        public EventDetails Details { get; set; }

        /// <summary>
        /// Collection of event sessions for multisession events.
        /// </summary>
        /// <value>Collection of event sessions for multisession events.</value>

        [DataMember(Name = "Sessions")]
        public List<EventSession> Sessions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartTimeSpecified: ").Append(StartTimeSpecified).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EndTimeSpecified: ").Append(EndTimeSpecified).Append("\n");
            sb.Append("  RegistrationEnabled: ").Append(RegistrationEnabled).Append("\n");
            sb.Append("  RegistrationsLimit: ").Append(RegistrationsLimit).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Sessions: ").Append(Sessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((ModelEvent)obj);
        }

        /// <summary>
        /// Returns true if ModelEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelEvent other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Id == other.Id || Id != null && Id.Equals(other.Id))
                && (Url == other.Url || Url != null && Url.Equals(other.Url))
                && (Name == other.Name || Name != null && Name.Equals(other.Name))
                && (
                    Location == other.Location
                    || Location != null && Location.Equals(other.Location)
                )
                && (
                    StartDate == other.StartDate
                    || StartDate != null && StartDate.Equals(other.StartDate)
                )
                && (
                    StartTimeSpecified == other.StartTimeSpecified
                    || StartTimeSpecified != null
                        && StartTimeSpecified.Equals(other.StartTimeSpecified)
                )
                && (EndDate == other.EndDate || EndDate != null && EndDate.Equals(other.EndDate))
                && (
                    EndTimeSpecified == other.EndTimeSpecified
                    || EndTimeSpecified != null && EndTimeSpecified.Equals(other.EndTimeSpecified)
                )
                && (
                    RegistrationEnabled == other.RegistrationEnabled
                    || RegistrationEnabled != null
                        && RegistrationEnabled.Equals(other.RegistrationEnabled)
                )
                && (
                    RegistrationsLimit == other.RegistrationsLimit
                    || RegistrationsLimit != null
                        && RegistrationsLimit.Equals(other.RegistrationsLimit)
                )
                && (Details == other.Details || Details != null && Details.Equals(other.Details))
                && (
                    Sessions == other.Sessions
                    || Sessions != null && Sessions.SequenceEqual(other.Sessions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                if (StartTimeSpecified != null)
                    hashCode = hashCode * 59 + StartTimeSpecified.GetHashCode();
                if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                if (EndTimeSpecified != null)
                    hashCode = hashCode * 59 + EndTimeSpecified.GetHashCode();
                if (RegistrationEnabled != null)
                    hashCode = hashCode * 59 + RegistrationEnabled.GetHashCode();
                if (RegistrationsLimit != null)
                    hashCode = hashCode * 59 + RegistrationsLimit.GetHashCode();
                if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                if (Sessions != null)
                    hashCode = hashCode * 59 + Sessions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ModelEvent left, ModelEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelEvent left, ModelEvent right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// Set of parameters for sending private message to contact/member
    /// </summary>
    [DataContract]
    public partial class SendMessageRequest : IEquatable<SendMessageRequest>
    {
        /// <summary>
        /// Contact ID of recipient
        /// </summary>
        /// <value>Contact ID of recipient</value>

        [DataMember(Name = "contactId")]
        public int? ContactId { get; set; }

        /// <summary>
        /// Message subject
        /// </summary>
        /// <value>Message subject</value>

        [DataMember(Name = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Message content in plain text
        /// </summary>
        /// <value>Message content in plain text</value>

        [DataMember(Name = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Name used when replying to the message.
        /// </summary>
        /// <value>Name used when replying to the message.</value>

        [DataMember(Name = "replyToName")]
        public string ReplyToName { get; set; }

        /// <summary>
        /// Email address used when replying to the message.
        /// </summary>
        /// <value>Email address used when replying to the message.</value>

        [DataMember(Name = "replyToEMail")]
        public string ReplyToEMail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendMessageRequest {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ReplyToName: ").Append(ReplyToName).Append("\n");
            sb.Append("  ReplyToEMail: ").Append(ReplyToEMail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((SendMessageRequest)obj);
        }

        /// <summary>
        /// Returns true if SendMessageRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SendMessageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendMessageRequest other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    ContactId == other.ContactId
                    || ContactId != null && ContactId.Equals(other.ContactId)
                )
                && (Subject == other.Subject || Subject != null && Subject.Equals(other.Subject))
                && (Text == other.Text || Text != null && Text.Equals(other.Text))
                && (
                    ReplyToName == other.ReplyToName
                    || ReplyToName != null && ReplyToName.Equals(other.ReplyToName)
                )
                && (
                    ReplyToEMail == other.ReplyToEMail
                    || ReplyToEMail != null && ReplyToEMail.Equals(other.ReplyToEMail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ContactId != null)
                    hashCode = hashCode * 59 + ContactId.GetHashCode();
                if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (ReplyToName != null)
                    hashCode = hashCode * 59 + ReplyToName.GetHashCode();
                if (ReplyToEMail != null)
                    hashCode = hashCode * 59 + ReplyToEMail.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(SendMessageRequest left, SendMessageRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SendMessageRequest left, SendMessageRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

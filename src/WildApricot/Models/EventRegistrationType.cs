/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// Settings for event registration type (ticket).
    /// </summary>
    [DataContract]
    public partial class EventRegistrationType : IEquatable<EventRegistrationType>
    {
        /// <summary>
        /// Unique event registration type identifier.
        /// </summary>
        /// <value>Unique event registration type identifier.</value>
        [Required]
        [DataMember(Name = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [Required]
        [DataMember(Name = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// Event registration type title.
        /// </summary>
        /// <value>Event registration type title.</value>
        [Required]
        [DataMember(Name = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Related event identifier
        /// </summary>
        /// <value>Related event identifier</value>
        [Required]
        [DataMember(Name = "EventId")]
        public int? EventId { get; set; }

        /// <summary>
        /// Registration type (ticket) description
        /// </summary>
        /// <value>Registration type (ticket) description</value>

        [DataMember(Name = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        [Required]
        [DataMember(Name = "BasePrice")]
        public decimal? BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets GuestPrice
        /// </summary>

        [DataMember(Name = "GuestPrice")]
        public decimal? GuestPrice { get; set; }

        /// <summary>
        /// Indicates whether this registration type is enabled user
        /// </summary>
        /// <value>Indicates whether this registration type is enabled user</value>

        [DataMember(Name = "AvailableForRegistration")]
        public bool? AvailableForRegistration { get; set; }

        /// <summary>
        /// Indicates whether registration code is required to register.
        /// </summary>
        /// <value>Indicates whether registration code is required to register.</value>
        [Required]
        [DataMember(Name = "CodeRequired")]
        public bool? CodeRequired { get; set; }

        /// <summary>
        /// Gets or Sets GuestRegistrationPolicy
        /// </summary>
        [Required]
        [DataMember(Name = "GuestRegistrationPolicy")]
        public GuestRegistrationPolicy GuestRegistrationPolicy { get; set; }

        /// <summary>
        /// Maximum number of attendees for this registration type.
        /// </summary>
        /// <value>Maximum number of attendees for this registration type.</value>

        [DataMember(Name = "MaximumRegistrantsCount")]
        public int? MaximumRegistrantsCount { get; set; }

        /// <summary>
        /// Shows is waitlist enabled for registration type
        /// </summary>
        /// <value>Shows is waitlist enabled for registration type</value>
        [Required]
        [DataMember(Name = "IsWaitlistEnabled")]
        public bool? IsWaitlistEnabled { get; set; }

        /// <summary>
        /// Indicates whether a single contact can register multiple times for this event.
        /// </summary>
        /// <value>Indicates whether a single contact can register multiple times for this event.</value>
        [Required]
        [DataMember(Name = "MultipleRegistrationAllowed")]
        public bool? MultipleRegistrationAllowed { get; set; }

        /// <summary>
        /// The current number of registrants for this registration type.
        /// </summary>
        /// <value>The current number of registrants for this registration type.</value>

        [DataMember(Name = "CurrentRegistrantsCount")]
        public int? CurrentRegistrantsCount { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>

        [DataMember(Name = "Availability")]
        public RegistrationTypeAccessLevel Availability { get; set; }

        /// <summary>
        /// The first day on which this registration type is available.
        /// </summary>
        /// <value>The first day on which this registration type is available.</value>

        [DataMember(Name = "AvailableFrom")]
        public DateTime? AvailableFrom { get; set; }

        /// <summary>
        /// The last day on which this registration type is available.
        /// </summary>
        /// <value>The last day on which this registration type is available.</value>

        [DataMember(Name = "AvailableThrough")]
        public DateTime? AvailableThrough { get; set; }

        /// <summary>
        /// Gets or Sets CancellationBehavior
        /// </summary>
        [Required]
        [DataMember(Name = "CancellationBehavior")]
        public EventCancellationBehavior CancellationBehavior { get; set; }

        /// <summary>
        /// Number of days when cancellation available before event started and CancellationBehavior is AllowUpToPeriodBeforeEvent.
        /// </summary>
        /// <value>Number of days when cancellation available before event started and CancellationBehavior is AllowUpToPeriodBeforeEvent.</value>

        [DataMember(Name = "CancellationDaysBeforeEvent")]
        public int? CancellationDaysBeforeEvent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventRegistrationType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  GuestPrice: ").Append(GuestPrice).Append("\n");
            sb.Append("  AvailableForRegistration: ").Append(AvailableForRegistration).Append("\n");
            sb.Append("  CodeRequired: ").Append(CodeRequired).Append("\n");
            sb.Append("  GuestRegistrationPolicy: ").Append(GuestRegistrationPolicy).Append("\n");
            sb.Append("  MaximumRegistrantsCount: ").Append(MaximumRegistrantsCount).Append("\n");
            sb.Append("  IsWaitlistEnabled: ").Append(IsWaitlistEnabled).Append("\n");
            sb.Append("  MultipleRegistrationAllowed: ")
                .Append(MultipleRegistrationAllowed)
                .Append("\n");
            sb.Append("  CurrentRegistrantsCount: ").Append(CurrentRegistrantsCount).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  AvailableFrom: ").Append(AvailableFrom).Append("\n");
            sb.Append("  AvailableThrough: ").Append(AvailableThrough).Append("\n");
            sb.Append("  CancellationBehavior: ").Append(CancellationBehavior).Append("\n");
            sb.Append("  CancellationDaysBeforeEvent: ")
                .Append(CancellationDaysBeforeEvent)
                .Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((EventRegistrationType)obj);
        }

        /// <summary>
        /// Returns true if EventRegistrationType instances are equal
        /// </summary>
        /// <param name="other">Instance of EventRegistrationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventRegistrationType other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Id == other.Id || Id != null && Id.Equals(other.Id))
                && (Url == other.Url || Url != null && Url.Equals(other.Url))
                && (Name == other.Name || Name != null && Name.Equals(other.Name))
                && (EventId == other.EventId || EventId != null && EventId.Equals(other.EventId))
                && (
                    Description == other.Description
                    || Description != null && Description.Equals(other.Description)
                )
                && (
                    BasePrice == other.BasePrice
                    || BasePrice != null && BasePrice.Equals(other.BasePrice)
                )
                && (
                    GuestPrice == other.GuestPrice
                    || GuestPrice != null && GuestPrice.Equals(other.GuestPrice)
                )
                && (
                    AvailableForRegistration == other.AvailableForRegistration
                    || AvailableForRegistration != null
                        && AvailableForRegistration.Equals(other.AvailableForRegistration)
                )
                && (
                    CodeRequired == other.CodeRequired
                    || CodeRequired != null && CodeRequired.Equals(other.CodeRequired)
                )
                && (
                    GuestRegistrationPolicy == other.GuestRegistrationPolicy
                    || GuestRegistrationPolicy != null
                        && GuestRegistrationPolicy.Equals(other.GuestRegistrationPolicy)
                )
                && (
                    MaximumRegistrantsCount == other.MaximumRegistrantsCount
                    || MaximumRegistrantsCount != null
                        && MaximumRegistrantsCount.Equals(other.MaximumRegistrantsCount)
                )
                && (
                    IsWaitlistEnabled == other.IsWaitlistEnabled
                    || IsWaitlistEnabled != null
                        && IsWaitlistEnabled.Equals(other.IsWaitlistEnabled)
                )
                && (
                    MultipleRegistrationAllowed == other.MultipleRegistrationAllowed
                    || MultipleRegistrationAllowed != null
                        && MultipleRegistrationAllowed.Equals(other.MultipleRegistrationAllowed)
                )
                && (
                    CurrentRegistrantsCount == other.CurrentRegistrantsCount
                    || CurrentRegistrantsCount != null
                        && CurrentRegistrantsCount.Equals(other.CurrentRegistrantsCount)
                )
                && (
                    Availability == other.Availability
                    || Availability != null && Availability.Equals(other.Availability)
                )
                && (
                    AvailableFrom == other.AvailableFrom
                    || AvailableFrom != null && AvailableFrom.Equals(other.AvailableFrom)
                )
                && (
                    AvailableThrough == other.AvailableThrough
                    || AvailableThrough != null && AvailableThrough.Equals(other.AvailableThrough)
                )
                && (
                    CancellationBehavior == other.CancellationBehavior
                    || CancellationBehavior != null
                        && CancellationBehavior.Equals(other.CancellationBehavior)
                )
                && (
                    CancellationDaysBeforeEvent == other.CancellationDaysBeforeEvent
                    || CancellationDaysBeforeEvent != null
                        && CancellationDaysBeforeEvent.Equals(other.CancellationDaysBeforeEvent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (EventId != null)
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (BasePrice != null)
                    hashCode = hashCode * 59 + BasePrice.GetHashCode();
                if (GuestPrice != null)
                    hashCode = hashCode * 59 + GuestPrice.GetHashCode();
                if (AvailableForRegistration != null)
                    hashCode = hashCode * 59 + AvailableForRegistration.GetHashCode();
                if (CodeRequired != null)
                    hashCode = hashCode * 59 + CodeRequired.GetHashCode();
                if (GuestRegistrationPolicy != null)
                    hashCode = hashCode * 59 + GuestRegistrationPolicy.GetHashCode();
                if (MaximumRegistrantsCount != null)
                    hashCode = hashCode * 59 + MaximumRegistrantsCount.GetHashCode();
                if (IsWaitlistEnabled != null)
                    hashCode = hashCode * 59 + IsWaitlistEnabled.GetHashCode();
                if (MultipleRegistrationAllowed != null)
                    hashCode = hashCode * 59 + MultipleRegistrationAllowed.GetHashCode();
                if (CurrentRegistrantsCount != null)
                    hashCode = hashCode * 59 + CurrentRegistrantsCount.GetHashCode();
                if (Availability != null)
                    hashCode = hashCode * 59 + Availability.GetHashCode();
                if (AvailableFrom != null)
                    hashCode = hashCode * 59 + AvailableFrom.GetHashCode();
                if (AvailableThrough != null)
                    hashCode = hashCode * 59 + AvailableThrough.GetHashCode();
                if (CancellationBehavior != null)
                    hashCode = hashCode * 59 + CancellationBehavior.GetHashCode();
                if (CancellationDaysBeforeEvent != null)
                    hashCode = hashCode * 59 + CancellationDaysBeforeEvent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EventRegistrationType left, EventRegistrationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventRegistrationType left, EventRegistrationType right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// n/a
    /// </summary>
    [DataContract]
    public partial class Settings : IEquatable<Settings>
    {
        /// <summary>
        /// Your account identifier.
        /// </summary>
        /// <value>Your account identifier.</value>

        [DataMember(Name = "AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Indicates whether an app for members available or not. It&#x27;s not available for free accounts.
        /// </summary>
        /// <value>Indicates whether an app for members available or not. It&#x27;s not available for free accounts.</value>

        [DataMember(Name = "AppForMembersAvailable")]
        public bool? AppForMembersAvailable { get; set; }

        /// <summary>
        /// Indicates whether an app for members enabled in settings or not
        /// </summary>
        /// <value>Indicates whether an app for members enabled in settings or not</value>

        [DataMember(Name = "EnableAppForMembers")]
        public bool? EnableAppForMembers { get; set; }

        /// <summary>
        /// Indicates whether an event list is available
        /// </summary>
        /// <value>Indicates whether an event list is available</value>

        [DataMember(Name = "EnableEventsList")]
        public bool? EnableEventsList { get; set; }

        /// <summary>
        /// Indicates whether a member directory is available
        /// </summary>
        /// <value>Indicates whether a member directory is available</value>

        [DataMember(Name = "EnableMemberDirectory")]
        public bool? EnableMemberDirectory { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>

        [DataMember(Name = "Tags")]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Settings {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AppForMembersAvailable: ").Append(AppForMembersAvailable).Append("\n");
            sb.Append("  EnableAppForMembers: ").Append(EnableAppForMembers).Append("\n");
            sb.Append("  EnableEventsList: ").Append(EnableEventsList).Append("\n");
            sb.Append("  EnableMemberDirectory: ").Append(EnableMemberDirectory).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((Settings)obj);
        }

        /// <summary>
        /// Returns true if Settings instances are equal
        /// </summary>
        /// <param name="other">Instance of Settings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Settings other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    AccountId == other.AccountId
                    || AccountId != null && AccountId.Equals(other.AccountId)
                )
                && (
                    AppForMembersAvailable == other.AppForMembersAvailable
                    || AppForMembersAvailable != null
                        && AppForMembersAvailable.Equals(other.AppForMembersAvailable)
                )
                && (
                    EnableAppForMembers == other.EnableAppForMembers
                    || EnableAppForMembers != null
                        && EnableAppForMembers.Equals(other.EnableAppForMembers)
                )
                && (
                    EnableEventsList == other.EnableEventsList
                    || EnableEventsList != null && EnableEventsList.Equals(other.EnableEventsList)
                )
                && (
                    EnableMemberDirectory == other.EnableMemberDirectory
                    || EnableMemberDirectory != null
                        && EnableMemberDirectory.Equals(other.EnableMemberDirectory)
                )
                && (Tags == other.Tags || Tags != null && Tags.SequenceEqual(other.Tags));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                if (AppForMembersAvailable != null)
                    hashCode = hashCode * 59 + AppForMembersAvailable.GetHashCode();
                if (EnableAppForMembers != null)
                    hashCode = hashCode * 59 + EnableAppForMembers.GetHashCode();
                if (EnableEventsList != null)
                    hashCode = hashCode * 59 + EnableEventsList.GetHashCode();
                if (EnableMemberDirectory != null)
                    hashCode = hashCode * 59 + EnableMemberDirectory.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Settings left, Settings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Settings left, Settings right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

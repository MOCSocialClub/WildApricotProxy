/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class StartPaymentParams : IEquatable<StartPaymentParams>
    {
        /// <summary>
        /// Collection of identifiers of invoices to be paid
        /// </summary>
        /// <value>Collection of identifiers of invoices to be paid</value>
        [Required]
        [DataMember(Name = "InvoiceIds")]
        public List<decimal?> InvoiceIds { get; set; }

        /// <summary>
        /// An ID of payment method - one of methods from getAllowedPaymentMethodTypes call
        /// </summary>
        /// <value>An ID of payment method - one of methods from getAllowedPaymentMethodTypes call</value>
        [Required]
        [DataMember(Name = "PaymentMethodType")]
        public string PaymentMethodType { get; set; }

        /// <summary>
        /// An URL to redirect to after successfully entering payment info
        /// </summary>
        /// <value>An URL to redirect to after successfully entering payment info</value>
        [Required]
        [DataMember(Name = "RedirectUrl")]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StartPaymentParams {\n");
            sb.Append("  InvoiceIds: ").Append(InvoiceIds).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((StartPaymentParams)obj);
        }

        /// <summary>
        /// Returns true if StartPaymentParams instances are equal
        /// </summary>
        /// <param name="other">Instance of StartPaymentParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StartPaymentParams other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    InvoiceIds == other.InvoiceIds
                    || InvoiceIds != null && InvoiceIds.SequenceEqual(other.InvoiceIds)
                )
                && (
                    PaymentMethodType == other.PaymentMethodType
                    || PaymentMethodType != null
                        && PaymentMethodType.Equals(other.PaymentMethodType)
                )
                && (
                    RedirectUrl == other.RedirectUrl
                    || RedirectUrl != null && RedirectUrl.Equals(other.RedirectUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (InvoiceIds != null)
                    hashCode = hashCode * 59 + InvoiceIds.GetHashCode();
                if (PaymentMethodType != null)
                    hashCode = hashCode * 59 + PaymentMethodType.GetHashCode();
                if (RedirectUrl != null)
                    hashCode = hashCode * 59 + RedirectUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(StartPaymentParams left, StartPaymentParams right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StartPaymentParams left, StartPaymentParams right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

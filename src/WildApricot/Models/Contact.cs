/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// Contact / member data. Optional fields can be omitted if value is null or if the fields are restricted from viewing.
    /// </summary>
    [DataContract]
    public partial class Contact : IEquatable<Contact>
    {
        /// <summary>
        /// Unique contact ID.
        /// </summary>
        /// <value>Unique contact ID.</value>
        [Required]
        [DataMember(Name = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>

        [DataMember(Name = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>

        [DataMember(Name = "FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>

        [DataMember(Name = "LastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>

        [DataMember(Name = "Organization")]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>

        [DataMember(Name = "Email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>

        [DataMember(Name = "Phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets MembershipLevel
        /// </summary>

        [DataMember(Name = "MembershipLevel")]
        public MembershipLevelStub MembershipLevel { get; set; }

        /// <summary>
        /// Collection of
        /// </summary>
        /// <value>Collection of</value>
        [Required]
        [DataMember(Name = "FieldValues")]
        public List<CustomFieldValue> FieldValues { get; set; }

        /// <summary>
        /// Gets or Sets SendMessageAllowed
        /// </summary>

        [DataMember(Name = "SendMessageAllowed")]
        public bool? SendMessageAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  MembershipLevel: ").Append(MembershipLevel).Append("\n");
            sb.Append("  FieldValues: ").Append(FieldValues).Append("\n");
            sb.Append("  SendMessageAllowed: ").Append(SendMessageAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((Contact)obj);
        }

        /// <summary>
        /// Returns true if Contact instances are equal
        /// </summary>
        /// <param name="other">Instance of Contact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contact other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Id == other.Id || Id != null && Id.Equals(other.Id))
                && (Url == other.Url || Url != null && Url.Equals(other.Url))
                && (
                    FirstName == other.FirstName
                    || FirstName != null && FirstName.Equals(other.FirstName)
                )
                && (
                    LastName == other.LastName
                    || LastName != null && LastName.Equals(other.LastName)
                )
                && (
                    Organization == other.Organization
                    || Organization != null && Organization.Equals(other.Organization)
                )
                && (Email == other.Email || Email != null && Email.Equals(other.Email))
                && (Phone == other.Phone || Phone != null && Phone.Equals(other.Phone))
                && (
                    MembershipLevel == other.MembershipLevel
                    || MembershipLevel != null && MembershipLevel.Equals(other.MembershipLevel)
                )
                && (
                    FieldValues == other.FieldValues
                    || FieldValues != null && FieldValues.SequenceEqual(other.FieldValues)
                )
                && (
                    SendMessageAllowed == other.SendMessageAllowed
                    || SendMessageAllowed != null
                        && SendMessageAllowed.Equals(other.SendMessageAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                if (MembershipLevel != null)
                    hashCode = hashCode * 59 + MembershipLevel.GetHashCode();
                if (FieldValues != null)
                    hashCode = hashCode * 59 + FieldValues.GetHashCode();
                if (SendMessageAllowed != null)
                    hashCode = hashCode * 59 + SendMessageAllowed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Contact left, Contact right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Contact left, Contact right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

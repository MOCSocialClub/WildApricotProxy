/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// Additional info for fields with rules / terms conditions. Not present for other field types.
    /// </summary>
    [DataContract]
    public partial class CustomFieldRulesAndTermsInfo : IEquatable<CustomFieldRulesAndTermsInfo>
    {
        /// <summary>
        /// Terms of use text.
        /// </summary>
        /// <value>Terms of use text.</value>

        [DataMember(Name = "Text")]
        public string Text { get; set; }

        /// <summary>
        /// Url of rules and terms document.
        /// </summary>
        /// <value>Url of rules and terms document.</value>

        [DataMember(Name = "Link")]
        public string Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldRulesAndTermsInfo {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((CustomFieldRulesAndTermsInfo)obj);
        }

        /// <summary>
        /// Returns true if CustomFieldRulesAndTermsInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomFieldRulesAndTermsInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldRulesAndTermsInfo other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Text == other.Text || Text != null && Text.Equals(other.Text))
                && (Link == other.Link || Link != null && Link.Equals(other.Link));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(
            CustomFieldRulesAndTermsInfo left,
            CustomFieldRulesAndTermsInfo right
        )
        {
            return Equals(left, right);
        }

        public static bool operator !=(
            CustomFieldRulesAndTermsInfo left,
            CustomFieldRulesAndTermsInfo right
        )
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

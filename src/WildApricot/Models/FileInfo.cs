/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class FileInfo : IEquatable<FileInfo>
    {
        /// <summary>
        /// Unique attachment identifier
        /// </summary>
        /// <value>Unique attachment identifier</value>

        [DataMember(Name = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// attachment name
        /// </summary>
        /// <value>attachment name</value>

        [DataMember(Name = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// http ContentType (MIME type)
        /// </summary>
        /// <value>http ContentType (MIME type)</value>

        [DataMember(Name = "ContentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// File size
        /// </summary>
        /// <value>File size</value>

        [DataMember(Name = "Size")]
        public int? Size { get; set; }

        /// <summary>
        /// Date and time when the file has been uploaded.
        /// </summary>
        /// <value>Date and time when the file has been uploaded.</value>

        [DataMember(Name = "CreatedDate")]
        public string CreatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((FileInfo)obj);
        }

        /// <summary>
        /// Returns true if FileInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of FileInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileInfo other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Id == other.Id || Id != null && Id.Equals(other.Id))
                && (Name == other.Name || Name != null && Name.Equals(other.Name))
                && (
                    ContentType == other.ContentType
                    || ContentType != null && ContentType.Equals(other.ContentType)
                )
                && (Size == other.Size || Size != null && Size.Equals(other.Size))
                && (
                    CreatedDate == other.CreatedDate
                    || CreatedDate != null && CreatedDate.Equals(other.CreatedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(FileInfo left, FileInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FileInfo left, FileInfo right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

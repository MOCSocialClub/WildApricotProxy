/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class MembershipLevel : IEquatable<MembershipLevel>
    {
        /// <summary>
        /// Unique membership level identifier
        /// </summary>
        /// <value>Unique membership level identifier</value>
        [Required]
        [DataMember(Name = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [Required]
        [DataMember(Name = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// Membership level title
        /// </summary>
        /// <value>Membership level title</value>
        [Required]
        [DataMember(Name = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Level description
        /// </summary>
        /// <value>Level description</value>

        [DataMember(Name = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name = "Type")]
        public MembershipLevelType Type { get; set; }

        /// <summary>
        /// The membership fee for one renewal period. See RenewalPeriod setttings for details.
        /// </summary>
        /// <value>The membership fee for one renewal period. See RenewalPeriod setttings for details.</value>
        [Required]
        [DataMember(Name = "MembershipFee")]
        public decimal? MembershipFee { get; set; }

        /// <summary>
        /// Maximum number of bundle members. Empty for individuals.
        /// </summary>
        /// <value>Maximum number of bundle members. Empty for individuals.</value>

        [DataMember(Name = "BundleMembersLimit")]
        public int? BundleMembersLimit { get; set; }

        /// <summary>
        /// Gets or Sets RenewalPeriod
        /// </summary>
        [Required]
        [DataMember(Name = "RenewalPeriod")]
        public MembershipRenewalPeriod RenewalPeriod { get; set; }

        /// <summary>
        /// For levels with renewal period !&#x3D; Never. If true then membership will be automatically renewed and user charged each next membership period.
        /// </summary>
        /// <value>For levels with renewal period !&#x3D; Never. If true then membership will be automatically renewed and user charged each next membership period.</value>
        [Required]
        [DataMember(Name = "AutomaticRecurringPayments")]
        public bool? AutomaticRecurringPayments { get; set; }

        /// <summary>
        /// Collection of membership levels that members on this level can change to.
        /// </summary>
        /// <value>Collection of membership levels that members on this level can change to.</value>

        [DataMember(Name = "MemberCanChangeToLevels")]
        public List<string> MemberCanChangeToLevels { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>

        [DataMember(Name = "PaymentMethod")]
        public MembershipLevelPaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// is there any applicable discount coupon
        /// </summary>
        /// <value>is there any applicable discount coupon</value>

        [DataMember(Name = "DiscountCouponExists")]
        public bool? DiscountCouponExists { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MembershipLevel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MembershipFee: ").Append(MembershipFee).Append("\n");
            sb.Append("  BundleMembersLimit: ").Append(BundleMembersLimit).Append("\n");
            sb.Append("  RenewalPeriod: ").Append(RenewalPeriod).Append("\n");
            sb.Append("  AutomaticRecurringPayments: ")
                .Append(AutomaticRecurringPayments)
                .Append("\n");
            sb.Append("  MemberCanChangeToLevels: ").Append(MemberCanChangeToLevels).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  DiscountCouponExists: ").Append(DiscountCouponExists).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((MembershipLevel)obj);
        }

        /// <summary>
        /// Returns true if MembershipLevel instances are equal
        /// </summary>
        /// <param name="other">Instance of MembershipLevel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MembershipLevel other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Id == other.Id || Id != null && Id.Equals(other.Id))
                && (Url == other.Url || Url != null && Url.Equals(other.Url))
                && (Name == other.Name || Name != null && Name.Equals(other.Name))
                && (
                    Description == other.Description
                    || Description != null && Description.Equals(other.Description)
                )
                && (Type == other.Type || Type != null && Type.Equals(other.Type))
                && (
                    MembershipFee == other.MembershipFee
                    || MembershipFee != null && MembershipFee.Equals(other.MembershipFee)
                )
                && (
                    BundleMembersLimit == other.BundleMembersLimit
                    || BundleMembersLimit != null
                        && BundleMembersLimit.Equals(other.BundleMembersLimit)
                )
                && (
                    RenewalPeriod == other.RenewalPeriod
                    || RenewalPeriod != null && RenewalPeriod.Equals(other.RenewalPeriod)
                )
                && (
                    AutomaticRecurringPayments == other.AutomaticRecurringPayments
                    || AutomaticRecurringPayments != null
                        && AutomaticRecurringPayments.Equals(other.AutomaticRecurringPayments)
                )
                && (
                    MemberCanChangeToLevels == other.MemberCanChangeToLevels
                    || MemberCanChangeToLevels != null
                        && MemberCanChangeToLevels.SequenceEqual(other.MemberCanChangeToLevels)
                )
                && (
                    PaymentMethod == other.PaymentMethod
                    || PaymentMethod != null && PaymentMethod.Equals(other.PaymentMethod)
                )
                && (
                    DiscountCouponExists == other.DiscountCouponExists
                    || DiscountCouponExists != null
                        && DiscountCouponExists.Equals(other.DiscountCouponExists)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (MembershipFee != null)
                    hashCode = hashCode * 59 + MembershipFee.GetHashCode();
                if (BundleMembersLimit != null)
                    hashCode = hashCode * 59 + BundleMembersLimit.GetHashCode();
                if (RenewalPeriod != null)
                    hashCode = hashCode * 59 + RenewalPeriod.GetHashCode();
                if (AutomaticRecurringPayments != null)
                    hashCode = hashCode * 59 + AutomaticRecurringPayments.GetHashCode();
                if (MemberCanChangeToLevels != null)
                    hashCode = hashCode * 59 + MemberCanChangeToLevels.GetHashCode();
                if (PaymentMethod != null)
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                if (DiscountCouponExists != null)
                    hashCode = hashCode * 59 + DiscountCouponExists.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(MembershipLevel left, MembershipLevel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MembershipLevel left, MembershipLevel right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

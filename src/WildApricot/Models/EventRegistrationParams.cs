/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    /// A record of registration for an event.
    /// </summary>
    [DataContract]
    public partial class EventRegistrationParams : IEquatable<EventRegistrationParams>
    {
        /// <summary>
        /// Unique event registration identifier. Required while updating existing registration. Should not be included when creating new registration.
        /// </summary>
        /// <value>Unique event registration identifier. Required while updating existing registration. Should not be included when creating new registration.</value>

        [DataMember(Name = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Related event identifier. Required when creating new registration. Will be ignored while updating existing registration.
        /// </summary>
        /// <value>Related event identifier. Required when creating new registration. Will be ignored while updating existing registration.</value>

        [DataMember(Name = "EventId")]
        public int? EventId { get; set; }

        /// <summary>
        /// Selected registration type identifier. Required when creating new registration.
        /// </summary>
        /// <value>Selected registration type identifier. Required when creating new registration.</value>

        [DataMember(Name = "RegistrationTypeId")]
        public int? RegistrationTypeId { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationFields
        /// </summary>

        [DataMember(Name = "RegistrationFields")]
        public List<CustomFieldValue> RegistrationFields { get; set; }

        /// <summary>
        /// For guest registrations: parent registration identifier. Will be ignored when updating existing registration.
        /// </summary>
        /// <value>For guest registrations: parent registration identifier. Will be ignored when updating existing registration.</value>

        [DataMember(Name = "ParentRegistrationId")]
        public int? ParentRegistrationId { get; set; }

        /// <summary>
        /// Indicates whether the registrant is included in the public list of event registrants.
        /// </summary>
        /// <value>Indicates whether the registrant is included in the public list of event registrants.</value>

        [DataMember(Name = "ShowToPublic")]
        public bool? ShowToPublic { get; set; }

        /// <summary>
        /// Indicates whether the registration is for new Wait List entry
        /// </summary>
        /// <value>Indicates whether the registration is for new Wait List entry</value>

        [DataMember(Name = "ForWaitList")]
        public bool? ForWaitList { get; set; }

        /// <summary>
        /// The number of guests for this registration, if guest registrations are set up to collect only the total number of guests.
        /// </summary>
        /// <value>The number of guests for this registration, if guest registrations are set up to collect only the total number of guests.</value>

        [DataMember(Name = "NumberOfGuests")]
        public int? NumberOfGuests { get; set; }

        /// <summary>
        /// The registration code for this event.
        /// </summary>
        /// <value>The registration code for this event.</value>

        [DataMember(Name = "RegistrationCode")]
        public string RegistrationCode { get; set; }

        /// <summary>
        /// An ID of payment method - one of methods from getAllowedPaymentMethodTypes call. If not set then invoice will be sent to registrant&#x27;s email.
        /// </summary>
        /// <value>An ID of payment method - one of methods from getAllowedPaymentMethodTypes call. If not set then invoice will be sent to registrant&#x27;s email.</value>

        [DataMember(Name = "PaymentMethodType")]
        public string PaymentMethodType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventRegistrationParams {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  RegistrationTypeId: ").Append(RegistrationTypeId).Append("\n");
            sb.Append("  RegistrationFields: ").Append(RegistrationFields).Append("\n");
            sb.Append("  ParentRegistrationId: ").Append(ParentRegistrationId).Append("\n");
            sb.Append("  ShowToPublic: ").Append(ShowToPublic).Append("\n");
            sb.Append("  ForWaitList: ").Append(ForWaitList).Append("\n");
            sb.Append("  NumberOfGuests: ").Append(NumberOfGuests).Append("\n");
            sb.Append("  RegistrationCode: ").Append(RegistrationCode).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((EventRegistrationParams)obj);
        }

        /// <summary>
        /// Returns true if EventRegistrationParams instances are equal
        /// </summary>
        /// <param name="other">Instance of EventRegistrationParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventRegistrationParams other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (Id == other.Id || Id != null && Id.Equals(other.Id))
                && (EventId == other.EventId || EventId != null && EventId.Equals(other.EventId))
                && (
                    RegistrationTypeId == other.RegistrationTypeId
                    || RegistrationTypeId != null
                        && RegistrationTypeId.Equals(other.RegistrationTypeId)
                )
                && (
                    RegistrationFields == other.RegistrationFields
                    || RegistrationFields != null
                        && RegistrationFields.SequenceEqual(other.RegistrationFields)
                )
                && (
                    ParentRegistrationId == other.ParentRegistrationId
                    || ParentRegistrationId != null
                        && ParentRegistrationId.Equals(other.ParentRegistrationId)
                )
                && (
                    ShowToPublic == other.ShowToPublic
                    || ShowToPublic != null && ShowToPublic.Equals(other.ShowToPublic)
                )
                && (
                    ForWaitList == other.ForWaitList
                    || ForWaitList != null && ForWaitList.Equals(other.ForWaitList)
                )
                && (
                    NumberOfGuests == other.NumberOfGuests
                    || NumberOfGuests != null && NumberOfGuests.Equals(other.NumberOfGuests)
                )
                && (
                    RegistrationCode == other.RegistrationCode
                    || RegistrationCode != null && RegistrationCode.Equals(other.RegistrationCode)
                )
                && (
                    PaymentMethodType == other.PaymentMethodType
                    || PaymentMethodType != null
                        && PaymentMethodType.Equals(other.PaymentMethodType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (EventId != null)
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                if (RegistrationTypeId != null)
                    hashCode = hashCode * 59 + RegistrationTypeId.GetHashCode();
                if (RegistrationFields != null)
                    hashCode = hashCode * 59 + RegistrationFields.GetHashCode();
                if (ParentRegistrationId != null)
                    hashCode = hashCode * 59 + ParentRegistrationId.GetHashCode();
                if (ShowToPublic != null)
                    hashCode = hashCode * 59 + ShowToPublic.GetHashCode();
                if (ForWaitList != null)
                    hashCode = hashCode * 59 + ForWaitList.GetHashCode();
                if (NumberOfGuests != null)
                    hashCode = hashCode * 59 + NumberOfGuests.GetHashCode();
                if (RegistrationCode != null)
                    hashCode = hashCode * 59 + RegistrationCode.GetHashCode();
                if (PaymentMethodType != null)
                    hashCode = hashCode * 59 + PaymentMethodType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EventRegistrationParams left, EventRegistrationParams right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventRegistrationParams left, EventRegistrationParams right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}

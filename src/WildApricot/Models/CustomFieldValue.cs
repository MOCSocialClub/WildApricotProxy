/*
 * Wild Apricot API for non-administrative access
 *
 * Wild Apricot API for non-administrative access
 *
 * OpenAPI spec version: 8.10.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace WildApricot.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class CustomFieldValue : IEquatable<CustomFieldValue>
    {
        /// <summary>
        /// Field name. Can be changed by administrator, so it is not recommended to identify fields by their names.
        /// </summary>
        /// <value>Field name. Can be changed by administrator, so it is not recommended to identify fields by their names.</value>
        [Required]
        [DataMember(Name = "FieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>

        [DataMember(Name = "FieldType")]
        public CustomFieldType FieldType { get; set; }

        /// <summary>
        /// Field order as described in forms.
        /// </summary>
        /// <value>Field order as described in forms.</value>

        [DataMember(Name = "FieldOrder")]
        public int? FieldOrder { get; set; }

        /// <summary>
        /// Unique identifier of field, so it can be used as a key to find custom field value record in a list.
        /// </summary>
        /// <value>Unique identifier of field, so it can be used as a key to find custom field value record in a list.</value>
        [Required]
        [DataMember(Name = "SystemCode")]
        public string SystemCode { get; set; }

        /// <summary>
        /// Field value. Can be of type string, number, object or array. See related ContactField.
        /// </summary>
        /// <value>Field value. Can be of type string, number, object or array. See related ContactField.</value>
        [Required]
        [DataMember(Name = "Value")]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldValue {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  FieldOrder: ").Append(FieldOrder).Append("\n");
            sb.Append("  SystemCode: ").Append(SystemCode).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((CustomFieldValue)obj);
        }

        /// <summary>
        /// Returns true if CustomFieldValue instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomFieldValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldValue other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    FieldName == other.FieldName
                    || FieldName != null && FieldName.Equals(other.FieldName)
                )
                && (
                    FieldType == other.FieldType
                    || FieldType != null && FieldType.Equals(other.FieldType)
                )
                && (
                    FieldOrder == other.FieldOrder
                    || FieldOrder != null && FieldOrder.Equals(other.FieldOrder)
                )
                && (
                    SystemCode == other.SystemCode
                    || SystemCode != null && SystemCode.Equals(other.SystemCode)
                )
                && (Value == other.Value || Value != null && Value.Equals(other.Value));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (FieldName != null)
                    hashCode = hashCode * 59 + FieldName.GetHashCode();
                if (FieldType != null)
                    hashCode = hashCode * 59 + FieldType.GetHashCode();
                if (FieldOrder != null)
                    hashCode = hashCode * 59 + FieldOrder.GetHashCode();
                if (SystemCode != null)
                    hashCode = hashCode * 59 + SystemCode.GetHashCode();
                if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CustomFieldValue left, CustomFieldValue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomFieldValue left, CustomFieldValue right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
